using System;
using System.Collections.Generic;

/*
  Copyright (c) 2011-2013, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  

*/

//
// Generated on Thu, Oct 23, 2014 14:22+0200 for FHIR v0.0.82
//


namespace Hl7.Fhir.Model
{
	/*
    * A class with methods to retrieve informationa about the
    * FHIR definitions based on which this assembly was generated.
    */
	public static partial class ModelInfo
	{
		public static List<string> SupportedResources =
			new List<string>
			{
				"AdverseReaction",
				"Alert",
				"AllergyIntolerance",
				"CarePlan",
				"Composition",
				"ConceptMap",
				"Condition",
				"Conformance",
				"Device",
				"DeviceObservationReport",
				"DiagnosticOrder",
				"DiagnosticReport",
				"DocumentManifest",
				"DocumentReference",
				"Encounter",
				"FamilyHistory",
				"Group",
				"ImagingStudy",
				"Immunization",
				"ImmunizationRecommendation",
				"List",
				"Location",
				"Media",
				"Medication",
				"MedicationAdministration",
				"MedicationDispense",
				"MedicationPrescription",
				"MedicationStatement",
				"MessageHeader",
				"Observation",
				"OperationOutcome",
				"Order",
				"OrderResponse",
				"Organization",
				"Other",
				"Patient",
				"Practitioner",
				"Procedure",
				"Profile",
				"Provenance",
				"Query",
				"Questionnaire",
				"RelatedPerson",
				"SecurityEvent",
				"Specimen",
				"Substance",
				"Supply",
				"ValueSet",
				"Binary",
			};

		public static string Version
		{
			get { return "0.0.82"; }
		}

		public static IDictionary<string, Type> FhirTypeToCsType =
			new Dictionary<string, Type>()
			{
				{ "Address", typeof(Hl7.Fhir.Model.Address) },
				{ "Age", typeof(Hl7.Fhir.Model.Age) },
				{ "Attachment", typeof(Hl7.Fhir.Model.Attachment) },
				{ "CodeableConcept", typeof(Hl7.Fhir.Model.CodeableConcept) },
				{ "Coding", typeof(Hl7.Fhir.Model.Coding) },
				{ "Contact", typeof(Hl7.Fhir.Model.Contact) },
				{ "Count", typeof(Hl7.Fhir.Model.Count) },
				{ "Distance", typeof(Hl7.Fhir.Model.Distance) },
				{ "Duration", typeof(Hl7.Fhir.Model.Duration) },
				{ "Element", typeof(Hl7.Fhir.Model.Element) },
				{ "Extension", typeof(Hl7.Fhir.Model.Extension) },
				{ "HumanName", typeof(Hl7.Fhir.Model.HumanName) },
				{ "Identifier", typeof(Hl7.Fhir.Model.Identifier) },
				{ "Money", typeof(Hl7.Fhir.Model.Money) },
				{ "Narrative", typeof(Hl7.Fhir.Model.Narrative) },
				{ "Period", typeof(Hl7.Fhir.Model.Period) },
				{ "Quantity", typeof(Hl7.Fhir.Model.Quantity) },
				{ "Range", typeof(Hl7.Fhir.Model.Range) },
				{ "Ratio", typeof(Hl7.Fhir.Model.Ratio) },
				{ "ResourceReference", typeof(Hl7.Fhir.Model.ResourceReference) },
				{ "SampledData", typeof(Hl7.Fhir.Model.SampledData) },
				{ "Schedule", typeof(Hl7.Fhir.Model.Schedule) },
				{ "base64Binary", typeof(Hl7.Fhir.Model.Base64Binary) },
				{ "boolean", typeof(Hl7.Fhir.Model.FhirBoolean) },
				{ "code", typeof(Hl7.Fhir.Model.Code) },
				{ "date", typeof(Hl7.Fhir.Model.Date) },
				{ "dateTime", typeof(Hl7.Fhir.Model.FhirDateTime) },
				{ "decimal", typeof(Hl7.Fhir.Model.FhirDecimal) },
				{ "id", typeof(Hl7.Fhir.Model.Id) },
				{ "idref", typeof(Hl7.Fhir.Model.IdRef) },
				{ "instant", typeof(Hl7.Fhir.Model.Instant) },
				{ "integer", typeof(Hl7.Fhir.Model.Integer) },
				{ "oid", typeof(Hl7.Fhir.Model.Oid) },
				{ "string", typeof(Hl7.Fhir.Model.FhirString) },
				{ "uri", typeof(Hl7.Fhir.Model.FhirUri) },
				{ "uuid", typeof(Hl7.Fhir.Model.Uuid) },
				{ "xhtml", typeof(Hl7.Fhir.Model.XHtml) },
				{ "Resource", typeof(Hl7.Fhir.Model.Resource) },
				{ "AdverseReaction", typeof(Hl7.Fhir.Model.AdverseReaction) },
				{ "Alert", typeof(Hl7.Fhir.Model.Alert) },
				{ "AllergyIntolerance", typeof(Hl7.Fhir.Model.AllergyIntolerance) },
				{ "CarePlan", typeof(Hl7.Fhir.Model.CarePlan) },
				{ "Composition", typeof(Hl7.Fhir.Model.Composition) },
				{ "ConceptMap", typeof(Hl7.Fhir.Model.ConceptMap) },
				{ "Condition", typeof(Hl7.Fhir.Model.Condition) },
				{ "Conformance", typeof(Hl7.Fhir.Model.Conformance) },
				{ "Device", typeof(Hl7.Fhir.Model.Device) },
				{ "DeviceObservationReport", typeof(Hl7.Fhir.Model.DeviceObservationReport) },
				{ "DiagnosticOrder", typeof(Hl7.Fhir.Model.DiagnosticOrder) },
				{ "DiagnosticReport", typeof(Hl7.Fhir.Model.DiagnosticReport) },
				{ "DocumentManifest", typeof(Hl7.Fhir.Model.DocumentManifest) },
				{ "DocumentReference", typeof(Hl7.Fhir.Model.DocumentReference) },
				{ "Encounter", typeof(Hl7.Fhir.Model.Encounter) },
				{ "FamilyHistory", typeof(Hl7.Fhir.Model.FamilyHistory) },
				{ "Group", typeof(Hl7.Fhir.Model.Group) },
				{ "ImagingStudy", typeof(Hl7.Fhir.Model.ImagingStudy) },
				{ "Immunization", typeof(Hl7.Fhir.Model.Immunization) },
				{ "ImmunizationRecommendation", typeof(Hl7.Fhir.Model.ImmunizationRecommendation) },
				{ "List", typeof(Hl7.Fhir.Model.List) },
				{ "Location", typeof(Hl7.Fhir.Model.Location) },
				{ "Media", typeof(Hl7.Fhir.Model.Media) },
				{ "Medication", typeof(Hl7.Fhir.Model.Medication) },
				{ "MedicationAdministration", typeof(Hl7.Fhir.Model.MedicationAdministration) },
				{ "MedicationDispense", typeof(Hl7.Fhir.Model.MedicationDispense) },
				{ "MedicationPrescription", typeof(Hl7.Fhir.Model.MedicationPrescription) },
				{ "MedicationStatement", typeof(Hl7.Fhir.Model.MedicationStatement) },
				{ "MessageHeader", typeof(Hl7.Fhir.Model.MessageHeader) },
				{ "Observation", typeof(Hl7.Fhir.Model.Observation) },
				{ "OperationOutcome", typeof(Hl7.Fhir.Model.OperationOutcome) },
				{ "Order", typeof(Hl7.Fhir.Model.Order) },
				{ "OrderResponse", typeof(Hl7.Fhir.Model.OrderResponse) },
				{ "Organization", typeof(Hl7.Fhir.Model.Organization) },
				{ "Other", typeof(Hl7.Fhir.Model.Other) },
				{ "Patient", typeof(Hl7.Fhir.Model.Patient) },
				{ "Practitioner", typeof(Hl7.Fhir.Model.Practitioner) },
				{ "Procedure", typeof(Hl7.Fhir.Model.Procedure) },
				{ "Profile", typeof(Hl7.Fhir.Model.Profile) },
				{ "Provenance", typeof(Hl7.Fhir.Model.Provenance) },
				{ "Query", typeof(Hl7.Fhir.Model.Query) },
				{ "Questionnaire", typeof(Hl7.Fhir.Model.Questionnaire) },
				{ "RelatedPerson", typeof(Hl7.Fhir.Model.RelatedPerson) },
				{ "SecurityEvent", typeof(Hl7.Fhir.Model.SecurityEvent) },
				{ "Specimen", typeof(Hl7.Fhir.Model.Specimen) },
				{ "Substance", typeof(Hl7.Fhir.Model.Substance) },
				{ "Supply", typeof(Hl7.Fhir.Model.Supply) },
				{ "ValueSet", typeof(Hl7.Fhir.Model.ValueSet) },
				{ "Binary", typeof(Hl7.Fhir.Model.Binary) },
			};

		public static IDictionary<Type, string> FhirCsTypeToString =
			new Dictionary<Type, string>()
			{
				{ typeof(Hl7.Fhir.Model.Address), "Address" },
				{ typeof(Hl7.Fhir.Model.Age), "Age" },
				{ typeof(Hl7.Fhir.Model.Attachment), "Attachment" },
				{ typeof(Hl7.Fhir.Model.CodeableConcept), "CodeableConcept" },
				{ typeof(Hl7.Fhir.Model.Coding), "Coding" },
				{ typeof(Hl7.Fhir.Model.Contact), "Contact" },
				{ typeof(Hl7.Fhir.Model.Count), "Count" },
				{ typeof(Hl7.Fhir.Model.Distance), "Distance" },
				{ typeof(Hl7.Fhir.Model.Duration), "Duration" },
				{ typeof(Hl7.Fhir.Model.Element), "Element" },
				{ typeof(Hl7.Fhir.Model.Extension), "Extension" },
				{ typeof(Hl7.Fhir.Model.HumanName), "HumanName" },
				{ typeof(Hl7.Fhir.Model.Identifier), "Identifier" },
				{ typeof(Hl7.Fhir.Model.Money), "Money" },
				{ typeof(Hl7.Fhir.Model.Narrative), "Narrative" },
				{ typeof(Hl7.Fhir.Model.Period), "Period" },
				{ typeof(Hl7.Fhir.Model.Quantity), "Quantity" },
				{ typeof(Hl7.Fhir.Model.Range), "Range" },
				{ typeof(Hl7.Fhir.Model.Ratio), "Ratio" },
				{ typeof(Hl7.Fhir.Model.ResourceReference), "ResourceReference" },
				{ typeof(Hl7.Fhir.Model.SampledData), "SampledData" },
				{ typeof(Hl7.Fhir.Model.Schedule), "Schedule" },
				{ typeof(Hl7.Fhir.Model.Base64Binary), "base64Binary" },
				{ typeof(Hl7.Fhir.Model.FhirBoolean), "boolean" },
				{ typeof(Hl7.Fhir.Model.Code), "code" },
				{ typeof(Hl7.Fhir.Model.Date), "date" },
				{ typeof(Hl7.Fhir.Model.FhirDateTime), "dateTime" },
				{ typeof(Hl7.Fhir.Model.FhirDecimal), "decimal" },
				{ typeof(Hl7.Fhir.Model.Id), "id" },
				{ typeof(Hl7.Fhir.Model.IdRef), "idref" },
				{ typeof(Hl7.Fhir.Model.Instant), "instant" },
				{ typeof(Hl7.Fhir.Model.Integer), "integer" },
				{ typeof(Hl7.Fhir.Model.Oid), "oid" },
				{ typeof(Hl7.Fhir.Model.FhirString), "string" },
				{ typeof(Hl7.Fhir.Model.FhirUri), "uri" },
				{ typeof(Hl7.Fhir.Model.Uuid), "uuid" },
				{ typeof(Hl7.Fhir.Model.XHtml), "xhtml" },
				{ typeof(Hl7.Fhir.Model.Resource), "Resource" },
				{ typeof(Hl7.Fhir.Model.AdverseReaction), "AdverseReaction" },
				{ typeof(Hl7.Fhir.Model.Alert), "Alert" },
				{ typeof(Hl7.Fhir.Model.AllergyIntolerance), "AllergyIntolerance" },
				{ typeof(Hl7.Fhir.Model.CarePlan), "CarePlan" },
				{ typeof(Hl7.Fhir.Model.Composition), "Composition" },
				{ typeof(Hl7.Fhir.Model.ConceptMap), "ConceptMap" },
				{ typeof(Hl7.Fhir.Model.Condition), "Condition" },
				{ typeof(Hl7.Fhir.Model.Conformance), "Conformance" },
				{ typeof(Hl7.Fhir.Model.Device), "Device" },
				{ typeof(Hl7.Fhir.Model.DeviceObservationReport), "DeviceObservationReport" },
				{ typeof(Hl7.Fhir.Model.DiagnosticOrder), "DiagnosticOrder" },
				{ typeof(Hl7.Fhir.Model.DiagnosticReport), "DiagnosticReport" },
				{ typeof(Hl7.Fhir.Model.DocumentManifest), "DocumentManifest" },
				{ typeof(Hl7.Fhir.Model.DocumentReference), "DocumentReference" },
				{ typeof(Hl7.Fhir.Model.Encounter), "Encounter" },
				{ typeof(Hl7.Fhir.Model.FamilyHistory), "FamilyHistory" },
				{ typeof(Hl7.Fhir.Model.Group), "Group" },
				{ typeof(Hl7.Fhir.Model.ImagingStudy), "ImagingStudy" },
				{ typeof(Hl7.Fhir.Model.Immunization), "Immunization" },
				{ typeof(Hl7.Fhir.Model.ImmunizationRecommendation), "ImmunizationRecommendation" },
				{ typeof(Hl7.Fhir.Model.List), "List" },
				{ typeof(Hl7.Fhir.Model.Location), "Location" },
				{ typeof(Hl7.Fhir.Model.Media), "Media" },
				{ typeof(Hl7.Fhir.Model.Medication), "Medication" },
				{ typeof(Hl7.Fhir.Model.MedicationAdministration), "MedicationAdministration" },
				{ typeof(Hl7.Fhir.Model.MedicationDispense), "MedicationDispense" },
				{ typeof(Hl7.Fhir.Model.MedicationPrescription), "MedicationPrescription" },
				{ typeof(Hl7.Fhir.Model.MedicationStatement), "MedicationStatement" },
				{ typeof(Hl7.Fhir.Model.MessageHeader), "MessageHeader" },
				{ typeof(Hl7.Fhir.Model.Observation), "Observation" },
				{ typeof(Hl7.Fhir.Model.OperationOutcome), "OperationOutcome" },
				{ typeof(Hl7.Fhir.Model.Order), "Order" },
				{ typeof(Hl7.Fhir.Model.OrderResponse), "OrderResponse" },
				{ typeof(Hl7.Fhir.Model.Organization), "Organization" },
				{ typeof(Hl7.Fhir.Model.Other), "Other" },
				{ typeof(Hl7.Fhir.Model.Patient), "Patient" },
				{ typeof(Hl7.Fhir.Model.Practitioner), "Practitioner" },
				{ typeof(Hl7.Fhir.Model.Procedure), "Procedure" },
				{ typeof(Hl7.Fhir.Model.Profile), "Profile" },
				{ typeof(Hl7.Fhir.Model.Provenance), "Provenance" },
				{ typeof(Hl7.Fhir.Model.Query), "Query" },
				{ typeof(Hl7.Fhir.Model.Questionnaire), "Questionnaire" },
				{ typeof(Hl7.Fhir.Model.RelatedPerson), "RelatedPerson" },
				{ typeof(Hl7.Fhir.Model.SecurityEvent), "SecurityEvent" },
				{ typeof(Hl7.Fhir.Model.Specimen), "Specimen" },
				{ typeof(Hl7.Fhir.Model.Substance), "Substance" },
				{ typeof(Hl7.Fhir.Model.Supply), "Supply" },
				{ typeof(Hl7.Fhir.Model.ValueSet), "ValueSet" },
				{ typeof(Hl7.Fhir.Model.Binary), "Binary" },
			};

		public static List<SearchParamDefinition> SearchParameters =
			new List<SearchParamDefinition>
			{
				new SearchParamDefinition() { Resource = "AdverseReaction", Name = "substance", Description = @"The name or code of the substance that produces the sensitivity", Type = Conformance.SearchParamType.Reference, Path = new string[] { "AdverseReaction.exposure.substance", } },
				new SearchParamDefinition() { Resource = "AdverseReaction", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "AdverseReaction", Name = "subject", Description = @"The subject that the sensitivity is about", Type = Conformance.SearchParamType.Reference, Path = new string[] { "AdverseReaction.subject", } },
				new SearchParamDefinition() { Resource = "AdverseReaction", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "AdverseReaction", Name = "date", Description = @"The date of the reaction", Type = Conformance.SearchParamType.Date, Path = new string[] { "AdverseReaction.date", } },
				new SearchParamDefinition() { Resource = "AdverseReaction", Name = "symptom", Description = @"One of the symptoms of the reaction", Type = Conformance.SearchParamType.Token, Path = new string[] { "AdverseReaction.symptom.code", } },
				new SearchParamDefinition() { Resource = "Alert", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Alert", Name = "subject", Description = @"The identity of a subject to list alerts for", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Alert.subject", } },
				new SearchParamDefinition() { Resource = "Alert", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "AllergyIntolerance", Name = "substance", Description = @"The name or code of the substance that produces the sensitivity", Type = Conformance.SearchParamType.Reference, Path = new string[] { "AllergyIntolerance.substance", } },
				new SearchParamDefinition() { Resource = "AllergyIntolerance", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "AllergyIntolerance", Name = "status", Description = @"The status of the sensitivity", Type = Conformance.SearchParamType.Token, Path = new string[] { "AllergyIntolerance.status", } },
				new SearchParamDefinition() { Resource = "AllergyIntolerance", Name = "recorder", Description = @"Who recorded the sensitivity", Type = Conformance.SearchParamType.Reference, Path = new string[] { "AllergyIntolerance.recorder", } },
				new SearchParamDefinition() { Resource = "AllergyIntolerance", Name = "subject", Description = @"The subject that the sensitivity is about", Type = Conformance.SearchParamType.Reference, Path = new string[] { "AllergyIntolerance.subject", } },
				new SearchParamDefinition() { Resource = "AllergyIntolerance", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "AllergyIntolerance", Name = "date", Description = @"Recorded date/time.", Type = Conformance.SearchParamType.Date, Path = new string[] { "AllergyIntolerance.recordedDate", } },
				new SearchParamDefinition() { Resource = "AllergyIntolerance", Name = "type", Description = @"The type of sensitivity", Type = Conformance.SearchParamType.Token, Path = new string[] { "AllergyIntolerance.sensitivityType", } },
				new SearchParamDefinition() { Resource = "CarePlan", Name = "activitycode", Description = @"Detail type of activity", Type = Conformance.SearchParamType.Token, Path = new string[] { "CarePlan.activity.simple.code", } },
				new SearchParamDefinition() { Resource = "CarePlan", Name = "patient", Description = @"Who care plan is for", Type = Conformance.SearchParamType.Reference, Path = new string[] { "CarePlan.patient", } },
				new SearchParamDefinition() { Resource = "CarePlan", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "CarePlan", Name = "condition", Description = @"Health issues this plan addresses", Type = Conformance.SearchParamType.Reference, Path = new string[] { "CarePlan.concern", } },
				new SearchParamDefinition() { Resource = "CarePlan", Name = "activitydetail", Description = @"Activity details defined in specific resource", Type = Conformance.SearchParamType.Reference, Path = new string[] { "CarePlan.activity.detail", } },
				new SearchParamDefinition() { Resource = "CarePlan", Name = "activitydate", Description = @"Specified date occurs within period specified by CarePlan.activity.timingSchedule", Type = Conformance.SearchParamType.Date, Path = new string[] { "CarePlan.activity.simple.timing[x]", } },
				new SearchParamDefinition() { Resource = "CarePlan", Name = "participant", Description = @"Who is involved", Type = Conformance.SearchParamType.Reference, Path = new string[] { "CarePlan.participant.member", } },
				new SearchParamDefinition() { Resource = "CarePlan", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "CarePlan", Name = "date", Description = @"Time period plan covers", Type = Conformance.SearchParamType.Date, Path = new string[] { "CarePlan.period", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "author", Description = @"Who and/or what authored the composition", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Composition.author", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Composition", Name = "attester", Description = @"Who attested the composition", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Composition.attester.party", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "subject", Description = @"Who and/or what the composition is about", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Composition.subject", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "section-content", Description = @"The actual data for the section", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Composition.section.content", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "context", Description = @"Code(s) that apply to the event being documented", Type = Conformance.SearchParamType.Token, Path = new string[] { "Composition.event.code", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "class", Description = @"Categorization of Composition", Type = Conformance.SearchParamType.Token, Path = new string[] { "Composition.class", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Composition", Name = "section-type", Description = @"Classification of section (recommended)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Composition.section.code", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "date", Description = @"Composition editing time", Type = Conformance.SearchParamType.Date, Path = new string[] { "Composition.date", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "type", Description = @"Kind of composition (LOINC if possible)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Composition.type", } },
				new SearchParamDefinition() { Resource = "Composition", Name = "identifier", Description = @"Logical identifier of composition (version-independent)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Composition.identifier", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "dependson", Description = @"Reference to element/field/valueset provides the context", Type = Conformance.SearchParamType.Token, Path = new string[] { "ConceptMap.concept.dependsOn.concept", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "status", Description = @"Status of the concept map", Type = Conformance.SearchParamType.Token, Path = new string[] { "ConceptMap.status", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "date", Description = @"The concept map publication date", Type = Conformance.SearchParamType.Date, Path = new string[] { "ConceptMap.date", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "version", Description = @"The version identifier of the concept map", Type = Conformance.SearchParamType.Token, Path = new string[] { "ConceptMap.version", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "publisher", Description = @"Name of the publisher of the concept map", Type = Conformance.SearchParamType.String, Path = new string[] { "ConceptMap.publisher", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "product", Description = @"Reference to element/field/valueset provides the context", Type = Conformance.SearchParamType.Token, Path = new string[] { "ConceptMap.concept.map.product.concept", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "system", Description = @"The system for any destination concepts mapped by this map", Type = Conformance.SearchParamType.Token, Path = new string[] { "ConceptMap.concept.map.system", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "source", Description = @"The system for any concepts mapped by this concept map", Type = Conformance.SearchParamType.Reference, Path = new string[] { "ConceptMap.source", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "description", Description = @"Text search in the description of the concept map", Type = Conformance.SearchParamType.String, Path = new string[] { "ConceptMap.description", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "name", Description = @"Name of the concept map", Type = Conformance.SearchParamType.String, Path = new string[] { "ConceptMap.name", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "target", Description = @"Provides context to the mappings", Type = Conformance.SearchParamType.Reference, Path = new string[] { "ConceptMap.target", } },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "ConceptMap", Name = "identifier", Description = @"The identifier of the concept map", Type = Conformance.SearchParamType.Token, Path = new string[] { "ConceptMap.identifier", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "asserter", Description = @"Person who asserts this condition", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Condition.asserter", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "location", Description = @"Location - may include laterality", Type = Conformance.SearchParamType.Token, Path = new string[] { "Condition.location.code", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "status", Description = @"The status of the condition", Type = Conformance.SearchParamType.Token, Path = new string[] { "Condition.status", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "subject", Description = @"Who has the condition?", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Condition.subject", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "onset", Description = @"When the Condition started (if started on a date)", Type = Conformance.SearchParamType.Date, Path = new string[] { "Condition.onset[x]", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "evidence", Description = @"Manifestation/symptom", Type = Conformance.SearchParamType.Token, Path = new string[] { "Condition.evidence.code", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "severity", Description = @"The severity of the condition", Type = Conformance.SearchParamType.Token, Path = new string[] { "Condition.severity", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "code", Description = @"Code for the condition", Type = Conformance.SearchParamType.Token, Path = new string[] { "Condition.code", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "encounter", Description = @"Encounter when condition first asserted", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Condition.encounter", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "date-asserted", Description = @"When first detected/suspected/entered", Type = Conformance.SearchParamType.Date, Path = new string[] { "Condition.dateAsserted", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "stage", Description = @"Simple summary (disease specific)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Condition.stage.summary", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "related-code", Description = @"Relationship target by means of a predefined code", Type = Conformance.SearchParamType.Token, Path = new string[] { "Condition.relatedItem.code", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "category", Description = @"The category of the condition", Type = Conformance.SearchParamType.Token, Path = new string[] { "Condition.category", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Condition", Name = "related-item", Description = @"Relationship target resource", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Condition.relatedItem.target", } },
				new SearchParamDefinition() { Resource = "Condition", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Conformance", Name = "status", Description = @"The current status of the conformance statement", Type = Conformance.SearchParamType.Token, Path = new string[] { "Conformance.status", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "resource", Description = @"Name of a resource mentioned in a conformance statement", Type = Conformance.SearchParamType.Token, Path = new string[] { "Conformance.rest.resource.type", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "security", Description = @"Information about security of implementation", Type = Conformance.SearchParamType.Token, Path = new string[] { "Conformance.rest.security", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "format", Description = @"formats supported (xml | json | mime type)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Conformance.format", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "date", Description = @"The conformance statement publication date", Type = Conformance.SearchParamType.Date, Path = new string[] { "Conformance.date", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "mode", Description = @"Mode - restful (server/client) or messaging (sender/receiver)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Conformance.rest.mode", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "version", Description = @"The version identifier of the conformance statement", Type = Conformance.SearchParamType.Token, Path = new string[] { "Conformance.version", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "publisher", Description = @"Name of the publisher of the conformance statement", Type = Conformance.SearchParamType.String, Path = new string[] { "Conformance.publisher", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "software", Description = @"Part of a the name of a software application", Type = Conformance.SearchParamType.String, Path = new string[] { "Conformance.software.name", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Conformance", Name = "event", Description = @"Event code in a conformance statement", Type = Conformance.SearchParamType.Token, Path = new string[] { "Conformance.messaging.event.code", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "description", Description = @"Text search in the description of the conformance statement", Type = Conformance.SearchParamType.String, Path = new string[] { "Conformance.description", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "name", Description = @"Name of the conformance statement", Type = Conformance.SearchParamType.String, Path = new string[] { "Conformance.name", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "supported-profile", Description = @"Profiles supported by the system", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Conformance.profile", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "fhirversion", Description = @"The version of FHIR", Type = Conformance.SearchParamType.Token, Path = new string[] { "Conformance.version", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Conformance", Name = "identifier", Description = @"The identifier of the conformance statement", Type = Conformance.SearchParamType.Token, Path = new string[] { "Conformance.identifier", } },
				new SearchParamDefinition() { Resource = "Conformance", Name = "profile", Description = @"A profile id invoked in a conformance statement", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Conformance.rest.resource.profile", } },
				new SearchParamDefinition() { Resource = "Device", Name = "organization", Description = @"The organization responsible for the device", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Device.owner", } },
				new SearchParamDefinition() { Resource = "Device", Name = "model", Description = @"The model of the device", Type = Conformance.SearchParamType.String, Path = new string[] { "Device.model", } },
				new SearchParamDefinition() { Resource = "Device", Name = "patient", Description = @"Patient information, if the resource is affixed to a person", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Device.patient", } },
				new SearchParamDefinition() { Resource = "Device", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Device", Name = "location", Description = @"A location, where the resource is found", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Device.location", } },
				new SearchParamDefinition() { Resource = "Device", Name = "manufacturer", Description = @"The manufacturer of the device", Type = Conformance.SearchParamType.String, Path = new string[] { "Device.manufacturer", } },
				new SearchParamDefinition() { Resource = "Device", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Device", Name = "udi", Description = @"FDA Mandated Unique Device Identifier", Type = Conformance.SearchParamType.String, Path = new string[] { "Device.udi", } },
				new SearchParamDefinition() { Resource = "Device", Name = "type", Description = @"The type of the device", Type = Conformance.SearchParamType.Token, Path = new string[] { "Device.type", } },
				new SearchParamDefinition() { Resource = "Device", Name = "identifier", Description = @"Instance id from manufacturer, owner and others", Type = Conformance.SearchParamType.Token, Path = new string[] { "Device.identifier", } },
				new SearchParamDefinition() { Resource = "DeviceObservationReport", Name = "observation", Description = @"The data for the metric", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DeviceObservationReport.virtualDevice.channel.metric.observation", } },
				new SearchParamDefinition() { Resource = "DeviceObservationReport", Name = "source", Description = @"Identifies/describes where the data came from", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DeviceObservationReport.source", } },
				new SearchParamDefinition() { Resource = "DeviceObservationReport", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DeviceObservationReport", Name = "subject", Description = @"Subject of the measurement", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DeviceObservationReport.subject", } },
				new SearchParamDefinition() { Resource = "DeviceObservationReport", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DeviceObservationReport", Name = "code", Description = @"The compatment code", Type = Conformance.SearchParamType.Token, Path = new string[] { "DeviceObservationReport.virtualDevice.code", } },
				new SearchParamDefinition() { Resource = "DeviceObservationReport", Name = "channel", Description = @"The channel code", Type = Conformance.SearchParamType.Token, Path = new string[] { "DeviceObservationReport.virtualDevice.channel.code", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "orderer", Description = @"Who ordered the test", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticOrder.orderer", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "status", Description = @"requested | received | accepted | in progress | review | completed | suspended | rejected | failed", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticOrder.status", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "subject", Description = @"Who and/or what test is about", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticOrder.subject", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "item-status", Description = @"requested | received | accepted | in progress | review | completed | suspended | rejected | failed", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticOrder.item.status", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "event-status", Description = @"requested | received | accepted | in progress | review | completed | suspended | rejected | failed", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticOrder.event.status", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "actor", Description = @"Who recorded or did this", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticOrder.event.actor", "DiagnosticOrder.item.event.actor", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "code", Description = @"Code to indicate the item (test or panel) being ordered", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticOrder.item.code", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "encounter", Description = @"The encounter that this diagnostic order is associated with", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticOrder.encounter", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "item-past-status", Description = @"requested | received | accepted | in progress | review | completed | suspended | rejected | failed", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticOrder.item.event.status", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "bodysite", Description = @"Location of requested test (if applicable)", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticOrder.item.bodySite", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "item-date", Description = @"The date at which the event happened", Type = Conformance.SearchParamType.Date, Path = new string[] { "DiagnosticOrder.item.event.dateTime", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "specimen", Description = @"If the whole order relates to specific specimens", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticOrder.specimen", "DiagnosticOrder.item.specimen", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "event-status-date", Description = @"A combination of past-status and date", Type = Conformance.SearchParamType.Composite, CompositeParams = new string[] { "event-status", "event-date", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "event-date", Description = @"The date at which the event happened", Type = Conformance.SearchParamType.Date, Path = new string[] { "DiagnosticOrder.event.dateTime", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "identifier", Description = @"Identifiers assigned to this order", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticOrder.identifier", } },
				new SearchParamDefinition() { Resource = "DiagnosticOrder", Name = "item-status-date", Description = @"A combination of item-past-status and item-date", Type = Conformance.SearchParamType.Composite, CompositeParams = new string[] { "item-past-status", "item-date", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "result", Description = @"Link to an atomic result (observation resource)", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticReport.result", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "status", Description = @"The status of the report", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticReport.status", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "subject", Description = @"The subject of the report", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticReport.subject", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "issued", Description = @"When the report was issued", Type = Conformance.SearchParamType.Date, Path = new string[] { "DiagnosticReport.issued", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "diagnosis", Description = @"A coded diagnosis on the report", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticReport.codedDiagnosis", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "image", Description = @"Reference to the image source", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticReport.image.link", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "date", Description = @"The clinically relevant time of the report", Type = Conformance.SearchParamType.Date, Path = new string[] { "DiagnosticReport.diagnostic[x]", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "request", Description = @"What was requested", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticReport.requestDetail", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "specimen", Description = @"The specimen details", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticReport.specimen", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "name", Description = @"The name of the report (e.g. the code for the report as a whole, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result)", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticReport.name", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "service", Description = @"Which diagnostic discipline/department created the report", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticReport.serviceCategory", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "performer", Description = @"Who was the source of the report (organization)", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DiagnosticReport.performer", } },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DiagnosticReport", Name = "identifier", Description = @"An identifier for the report", Type = Conformance.SearchParamType.Token, Path = new string[] { "DiagnosticReport.identifier", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "content", Description = @"Contents of this set of documents", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentManifest.content", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "author", Description = @"Who and/or what authored the document", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentManifest.author", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "supersedes", Description = @"If this document manifest replaces another", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentManifest.supercedes", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "status", Description = @"current | superceded | entered in error", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentManifest.status", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "created", Description = @"When this document manifest created", Type = Conformance.SearchParamType.Date, Path = new string[] { "DocumentManifest.created", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "confidentiality", Description = @"Sensitivity of set of documents", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentManifest.confidentiality", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "description", Description = @"Human-readable description (title)", Type = Conformance.SearchParamType.String, Path = new string[] { "DocumentManifest.description", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "subject", Description = @"The subject of the set of documents", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentManifest.subject", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "type", Description = @"What kind of document set this is", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentManifest.type", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "identifier", Description = @"Unique Identifier for the set of documents", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentManifest.masterIdentifier", "DocumentManifest.identifier", } },
				new SearchParamDefinition() { Resource = "DocumentManifest", Name = "recipient", Description = @"Intended to get notified about this set of documents", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentManifest.recipient", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "location", Description = @"Where to access the document", Type = Conformance.SearchParamType.String, Path = new string[] { "DocumentReference.location", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "indexed", Description = @"When this document reference created", Type = Conformance.SearchParamType.Date, Path = new string[] { "DocumentReference.indexed", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "status", Description = @"current | superceded | entered in error", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.status", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "relatesto", Description = @"Target of the relationship", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentReference.relatesTo.target", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "subject", Description = @"Who|what is the subject of the document", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentReference.subject", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "relation", Description = @"replaces | transforms | signs | appends", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.relatesTo.code", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "class", Description = @"Categorization of Document", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.class", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "format", Description = @"Format/content rules for the document", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.format", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "period", Description = @"Time of service that is being documented", Type = Conformance.SearchParamType.Date, Path = new string[] { "DocumentReference.context.period", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "type", Description = @"What kind of document this is (LOINC if possible)", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.type", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "authenticator", Description = @"Who/What authenticated the document", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentReference.authenticator", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "size", Description = @"Size of the document in bytes", Type = Conformance.SearchParamType.Number, Path = new string[] { "DocumentReference.size", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "relationship", Description = @"Combination of relation and relatesTo", Type = Conformance.SearchParamType.Composite, CompositeParams = new string[] { "relatesto", "relation", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "author", Description = @"Who and/or what authored the document", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentReference.author", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "custodian", Description = @"Org which maintains the document", Type = Conformance.SearchParamType.Reference, Path = new string[] { "DocumentReference.custodian", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "facility", Description = @"Kind of facility where patient was seen", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.context.facilityType", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "created", Description = @"Document creation time", Type = Conformance.SearchParamType.Date, Path = new string[] { "DocumentReference.created", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "event", Description = @"Main Clinical Acts Documented", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.context.event", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "confidentiality", Description = @"Sensitivity of source document", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.confidentiality", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "description", Description = @"Human-readable description (title)", Type = Conformance.SearchParamType.String, Path = new string[] { "DocumentReference.description", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "language", Description = @"The marked primary language for the document", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.primaryLanguage", } },
				new SearchParamDefinition() { Resource = "DocumentReference", Name = "identifier", Description = @"Master Version Specific Identifier", Type = Conformance.SearchParamType.Token, Path = new string[] { "DocumentReference.masterIdentifier", "DocumentReference.identifier", } },
				new SearchParamDefinition() { Resource = "Encounter", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Encounter", Name = "location", Description = @"Location the encounter takes place", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Encounter.location.location", } },
				new SearchParamDefinition() { Resource = "Encounter", Name = "status", Description = @"planned | in progress | onleave | finished | cancelled", Type = Conformance.SearchParamType.Token, Path = new string[] { "Encounter.status", } },
				new SearchParamDefinition() { Resource = "Encounter", Name = "subject", Description = @"The patient present at the encounter", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Encounter.subject", } },
				new SearchParamDefinition() { Resource = "Encounter", Name = "indication", Description = @"Reason the encounter takes place (resource)", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Encounter.indication", } },
				new SearchParamDefinition() { Resource = "Encounter", Name = "length", Description = @"Length of encounter in days", Type = Conformance.SearchParamType.Number, Path = new string[] { "Encounter.length", } },
				new SearchParamDefinition() { Resource = "Encounter", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Encounter", Name = "date", Description = @"A date within the period the Encounter lasted", Type = Conformance.SearchParamType.Date, Path = new string[] { "Encounter.period", } },
				new SearchParamDefinition() { Resource = "Encounter", Name = "identifier", Description = @"Identifier(s) by which this encounter is known", Type = Conformance.SearchParamType.Token, Path = new string[] { "Encounter.identifier", } },
				new SearchParamDefinition() { Resource = "Encounter", Name = "location-period", Description = @"Time period during which the patient was present at the location", Type = Conformance.SearchParamType.Date, Path = new string[] { "Encounter.location.period", } },
				new SearchParamDefinition() { Resource = "FamilyHistory", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "FamilyHistory", Name = "subject", Description = @"The identity of a subject to list family history items for", Type = Conformance.SearchParamType.Reference, Path = new string[] { "FamilyHistory.subject", } },
				new SearchParamDefinition() { Resource = "FamilyHistory", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Group", Name = "member", Description = @"Who is in group", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Group.member", } },
				new SearchParamDefinition() { Resource = "Group", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Group", Name = "characteristic-value", Description = @"A composite of both characteristic and value", Type = Conformance.SearchParamType.Composite, CompositeParams = new string[] { "characteristic", "value", } },
				new SearchParamDefinition() { Resource = "Group", Name = "value", Description = @"Value held by characteristic", Type = Conformance.SearchParamType.Token, Path = new string[] { "Group.characteristic.value[x]", } },
				new SearchParamDefinition() { Resource = "Group", Name = "actual", Description = @"Descriptive or actual", Type = Conformance.SearchParamType.Token, Path = new string[] { "Group.actual", } },
				new SearchParamDefinition() { Resource = "Group", Name = "exclude", Description = @"Group includes or excludes", Type = Conformance.SearchParamType.Token, Path = new string[] { "Group.characteristic.exclude", } },
				new SearchParamDefinition() { Resource = "Group", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Group", Name = "code", Description = @"The kind of resources contained", Type = Conformance.SearchParamType.Token, Path = new string[] { "Group.code", } },
				new SearchParamDefinition() { Resource = "Group", Name = "characteristic", Description = @"Kind of characteristic", Type = Conformance.SearchParamType.Token, Path = new string[] { "Group.characteristic.code", } },
				new SearchParamDefinition() { Resource = "Group", Name = "type", Description = @"The type of resources the group contains", Type = Conformance.SearchParamType.Token, Path = new string[] { "Group.type", } },
				new SearchParamDefinition() { Resource = "Group", Name = "identifier", Description = @"Unique id", Type = Conformance.SearchParamType.Token, Path = new string[] { "Group.identifier", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "uid", Description = @"Formal identifier for this instance (0008,0018)", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImagingStudy.series.instance.uid", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "series", Description = @"The series id for the image", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImagingStudy.series.uid", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "bodysite", Description = @"Body part examined (Map from 0018,0015)", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImagingStudy.series.bodySite", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "subject", Description = @"Who the study is about", Type = Conformance.SearchParamType.Reference, Path = new string[] { "ImagingStudy.subject", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "accession", Description = @"The accession id for the image", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImagingStudy.accessionNo", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "study", Description = @"The study id for the image", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImagingStudy.uid", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "modality", Description = @"The modality of the image", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImagingStudy.series.modality", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "date", Description = @"The date the study was done was taken", Type = Conformance.SearchParamType.Date, Path = new string[] { "ImagingStudy.dateTime", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "dicom-class", Description = @"DICOM class type (0008,0016)", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImagingStudy.series.instance.sopclass", } },
				new SearchParamDefinition() { Resource = "ImagingStudy", Name = "size", Description = @"The size of the image in MB - may include > or < in the value", Type = Conformance.SearchParamType.Number },
				new SearchParamDefinition() { Resource = "Immunization", Name = "reaction", Description = @"Additional information on reaction", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Immunization.reaction.detail", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "requester", Description = @"The practitioner who ordered the vaccination", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Immunization.requester", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "dose-sequence", Description = @"What dose number within series?", Type = Conformance.SearchParamType.Number, Path = new string[] { "Immunization.vaccinationProtocol.doseSequence", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "vaccine-type", Description = @"Vaccine Product Type Administered", Type = Conformance.SearchParamType.Token, Path = new string[] { "Immunization.vaccineType", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "location", Description = @"The service delivery location or facility in which the vaccine was / was to be administered", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Immunization.location", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "reason", Description = @"Why immunization occurred", Type = Conformance.SearchParamType.Token, Path = new string[] { "Immunization.explanation.reason", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "subject", Description = @"The subject of the vaccination event / refusal", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Immunization.subject", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "reaction-date", Description = @"When did reaction start?", Type = Conformance.SearchParamType.Date, Path = new string[] { "Immunization.reaction.date", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "date", Description = @"Vaccination  Administration / Refusal Date", Type = Conformance.SearchParamType.Date, Path = new string[] { "Immunization.date", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "lot-number", Description = @"Vaccine Lot Number", Type = Conformance.SearchParamType.String, Path = new string[] { "Immunization.lotNumber", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Immunization", Name = "manufacturer", Description = @"Vaccine Manufacturer", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Immunization.manufacturer", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "performer", Description = @"The practitioner who administered the vaccination", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Immunization.performer", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Immunization", Name = "refused", Description = @"Was immunization refused?", Type = Conformance.SearchParamType.Token, Path = new string[] { "Immunization.refusedIndicator", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "refusal-reason", Description = @"Explanation of refusal / exemption", Type = Conformance.SearchParamType.Token, Path = new string[] { "Immunization.explanation.refusalReason", } },
				new SearchParamDefinition() { Resource = "Immunization", Name = "identifier", Description = @"Business identifier", Type = Conformance.SearchParamType.Token, Path = new string[] { "Immunization.identifier", } },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "information", Description = @"Patient observations supporting recommendation", Type = Conformance.SearchParamType.Reference, Path = new string[] { "ImmunizationRecommendation.recommendation.supportingPatientInformation", } },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "dose-sequence", Description = @"Number of dose within sequence", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImmunizationRecommendation.recommendation.protocol.doseSequence", } },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "support", Description = @"Past immunizations supporting recommendation", Type = Conformance.SearchParamType.Reference, Path = new string[] { "ImmunizationRecommendation.recommendation.supportingImmunization", } },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "vaccine-type", Description = @"Vaccine recommendation applies to", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImmunizationRecommendation.recommendation.vaccineType", } },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "status", Description = @"Vaccine administration status", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImmunizationRecommendation.recommendation.forecastStatus", } },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "dose-number", Description = @"Recommended dose number", Type = Conformance.SearchParamType.Number, Path = new string[] { "ImmunizationRecommendation.recommendation.doseNumber", } },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "subject", Description = @"Who this profile is for", Type = Conformance.SearchParamType.Reference, Path = new string[] { "ImmunizationRecommendation.subject", } },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "date", Description = @"Date recommendation created", Type = Conformance.SearchParamType.Date, Path = new string[] { "ImmunizationRecommendation.recommendation.date", } },
				new SearchParamDefinition() { Resource = "ImmunizationRecommendation", Name = "identifier", Description = @"Business identifier", Type = Conformance.SearchParamType.Token, Path = new string[] { "ImmunizationRecommendation.identifier", } },
				new SearchParamDefinition() { Resource = "List", Name = "source", Description = @"Who and/or what defined the list contents", Type = Conformance.SearchParamType.Reference, Path = new string[] { "List.source", } },
				new SearchParamDefinition() { Resource = "List", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "List", Name = "subject", Description = @"If all resources have the same subject", Type = Conformance.SearchParamType.Reference, Path = new string[] { "List.subject", } },
				new SearchParamDefinition() { Resource = "List", Name = "item", Description = @"Actual entry", Type = Conformance.SearchParamType.Reference, Path = new string[] { "List.entry.item", } },
				new SearchParamDefinition() { Resource = "List", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "List", Name = "code", Description = @"What the purpose of this list is", Type = Conformance.SearchParamType.Token, Path = new string[] { "List.code", } },
				new SearchParamDefinition() { Resource = "List", Name = "date", Description = @"When the list was prepared", Type = Conformance.SearchParamType.Date, Path = new string[] { "List.date", } },
				new SearchParamDefinition() { Resource = "List", Name = "empty-reason", Description = @"Why list is empty", Type = Conformance.SearchParamType.Token, Path = new string[] { "List.emptyReason", } },
				new SearchParamDefinition() { Resource = "Location", Name = "near", Description = @"The coordinates expressed as [lat],[long] (using KML, see notes) to find locations near to (servers may search using a square rather than a circle for efficiency)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Location", Name = "partof", Description = @"The location of which this location is a part", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Location.partOf", } },
				new SearchParamDefinition() { Resource = "Location", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Location", Name = "status", Description = @"Searches for locations with a specific kind of status", Type = Conformance.SearchParamType.Token, Path = new string[] { "Location.status", } },
				new SearchParamDefinition() { Resource = "Location", Name = "address", Description = @"A (part of the) address of the location", Type = Conformance.SearchParamType.String, Path = new string[] { "Location.address", } },
				new SearchParamDefinition() { Resource = "Location", Name = "name", Description = @"A (portion of the) name of the location", Type = Conformance.SearchParamType.String, Path = new string[] { "Location.name", } },
				new SearchParamDefinition() { Resource = "Location", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Location", Name = "near-distance", Description = @"A distance quantity to limit the near search to locations within a specific distance", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Location", Name = "type", Description = @"A code for the type of location", Type = Conformance.SearchParamType.Token, Path = new string[] { "Location.type", } },
				new SearchParamDefinition() { Resource = "Location", Name = "identifier", Description = @"Unique code or number identifying the location to its users", Type = Conformance.SearchParamType.Token, Path = new string[] { "Location.identifier", } },
				new SearchParamDefinition() { Resource = "Media", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Media", Name = "subject", Description = @"Who/What this Media is a record of", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Media.subject", } },
				new SearchParamDefinition() { Resource = "Media", Name = "subtype", Description = @"The type of acquisition equipment/process", Type = Conformance.SearchParamType.Token, Path = new string[] { "Media.subtype", } },
				new SearchParamDefinition() { Resource = "Media", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Media", Name = "view", Description = @"Imaging view e.g Lateral or Antero-posterior", Type = Conformance.SearchParamType.Token, Path = new string[] { "Media.view", } },
				new SearchParamDefinition() { Resource = "Media", Name = "date", Description = @"When the media was taken/recorded (end)", Type = Conformance.SearchParamType.Date, Path = new string[] { "Media.dateTime", } },
				new SearchParamDefinition() { Resource = "Media", Name = "type", Description = @"photo | video | audio", Type = Conformance.SearchParamType.Token, Path = new string[] { "Media.type", } },
				new SearchParamDefinition() { Resource = "Media", Name = "identifier", Description = @"Identifier(s) for the image", Type = Conformance.SearchParamType.Token, Path = new string[] { "Media.identifier", } },
				new SearchParamDefinition() { Resource = "Media", Name = "operator", Description = @"The person who generated the image", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Media.operator", } },
				new SearchParamDefinition() { Resource = "Medication", Name = "content", Description = @"A product in the package", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Medication.package.content.item", } },
				new SearchParamDefinition() { Resource = "Medication", Name = "form", Description = @"powder | tablets | carton +", Type = Conformance.SearchParamType.Token, Path = new string[] { "Medication.product.form", } },
				new SearchParamDefinition() { Resource = "Medication", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Medication", Name = "container", Description = @"E.g. box, vial, blister-pack", Type = Conformance.SearchParamType.Token, Path = new string[] { "Medication.package.container", } },
				new SearchParamDefinition() { Resource = "Medication", Name = "manufacturer", Description = @"Manufacturer of the item", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Medication.manufacturer", } },
				new SearchParamDefinition() { Resource = "Medication", Name = "name", Description = @"Common / Commercial name", Type = Conformance.SearchParamType.String, Path = new string[] { "Medication.name", } },
				new SearchParamDefinition() { Resource = "Medication", Name = "ingredient", Description = @"The product contained", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Medication.product.ingredient.item", } },
				new SearchParamDefinition() { Resource = "Medication", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Medication", Name = "code", Description = @"Codes that identify this medication", Type = Conformance.SearchParamType.Token, Path = new string[] { "Medication.code", } },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "medication", Description = @"Return administrations of this medication", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationAdministration.medication", } },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "patient", Description = @"The identity of a patient to list administrations  for", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationAdministration.patient", } },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "status", Description = @"MedicationAdministration event status (for example one of active/paused/completed/nullified)", Type = Conformance.SearchParamType.Token, Path = new string[] { "MedicationAdministration.status", } },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "prescription", Description = @"The identity of a prescription to list administrations from", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationAdministration.prescription", } },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "device", Description = @"Return administrations with this administration device identity", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationAdministration.device", } },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "notgiven", Description = @"Administrations that were not made", Type = Conformance.SearchParamType.Token, Path = new string[] { "MedicationAdministration.wasNotGiven", } },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "whengiven", Description = @"Date of administration", Type = Conformance.SearchParamType.Date, Path = new string[] { "MedicationAdministration.whenGiven", } },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "encounter", Description = @"Return administrations that share this encounter", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationAdministration.encounter", } },
				new SearchParamDefinition() { Resource = "MedicationAdministration", Name = "identifier", Description = @"Return administrations with this external identity", Type = Conformance.SearchParamType.Token, Path = new string[] { "MedicationAdministration.identifier", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "medication", Description = @"Returns dispenses of this medicine", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationDispense.dispense.medication", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "prescription", Description = @"The identity of a prescription to list dispenses from", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationDispense.authorizingPrescription", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "status", Description = @"Status of the dispense", Type = Conformance.SearchParamType.Token, Path = new string[] { "MedicationDispense.dispense.status", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "type", Description = @"Return all dispenses of a specific type", Type = Conformance.SearchParamType.Token, Path = new string[] { "MedicationDispense.dispense.type", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "destination", Description = @"Return dispenses that should be sent to a secific destination", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationDispense.dispense.destination", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "patient", Description = @"The identity of a patient to list dispenses  for", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationDispense.patient", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "responsibleparty", Description = @"Return all dispenses with the specified responsible party", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationDispense.substitution.responsibleParty", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "dispenser", Description = @"Return all dispenses performed by a specific indiividual", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationDispense.dispenser", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "identifier", Description = @"Return dispenses with this external identity", Type = Conformance.SearchParamType.Token, Path = new string[] { "MedicationDispense.identifier", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "whenprepared", Description = @"Date when medication prepared", Type = Conformance.SearchParamType.Date, Path = new string[] { "MedicationDispense.dispense.whenPrepared", } },
				new SearchParamDefinition() { Resource = "MedicationDispense", Name = "whenhandedover", Description = @"Date when medication handed over to patient (outpatient setting), or supplied to ward or clinic (inpatient setting)", Type = Conformance.SearchParamType.Date, Path = new string[] { "MedicationDispense.dispense.whenHandedOver", } },
				new SearchParamDefinition() { Resource = "MedicationPrescription", Name = "medication", Description = @"Code for medicine or text in medicine name", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationPrescription.medication", } },
				new SearchParamDefinition() { Resource = "MedicationPrescription", Name = "datewritten", Description = @"Return prescriptions written on this date", Type = Conformance.SearchParamType.Date, Path = new string[] { "MedicationPrescription.dateWritten", } },
				new SearchParamDefinition() { Resource = "MedicationPrescription", Name = "patient", Description = @"The identity of a patient to list dispenses  for", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationPrescription.patient", } },
				new SearchParamDefinition() { Resource = "MedicationPrescription", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "MedicationPrescription", Name = "status", Description = @"Status of the prescription", Type = Conformance.SearchParamType.Token, Path = new string[] { "MedicationPrescription.status", } },
				new SearchParamDefinition() { Resource = "MedicationPrescription", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "MedicationPrescription", Name = "encounter", Description = @"Return prescriptions with this encounter identity", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationPrescription.encounter", } },
				new SearchParamDefinition() { Resource = "MedicationPrescription", Name = "identifier", Description = @"Return prescriptions with this external identity", Type = Conformance.SearchParamType.Token, Path = new string[] { "MedicationPrescription.identifier", } },
				new SearchParamDefinition() { Resource = "MedicationStatement", Name = "medication", Description = @"Code for medicine or text in medicine name", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationStatement.medication", } },
				new SearchParamDefinition() { Resource = "MedicationStatement", Name = "patient", Description = @"The identity of a patient to list administrations  for", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationStatement.patient", } },
				new SearchParamDefinition() { Resource = "MedicationStatement", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "MedicationStatement", Name = "device", Description = @"Return administrations with this administration device identity", Type = Conformance.SearchParamType.Reference, Path = new string[] { "MedicationStatement.device", } },
				new SearchParamDefinition() { Resource = "MedicationStatement", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "MedicationStatement", Name = "when-given", Description = @"Date of administration", Type = Conformance.SearchParamType.Date, Path = new string[] { "MedicationStatement.whenGiven", } },
				new SearchParamDefinition() { Resource = "MedicationStatement", Name = "identifier", Description = @"Return administrations with this external identity", Type = Conformance.SearchParamType.Token, Path = new string[] { "MedicationStatement.identifier", } },
				new SearchParamDefinition() { Resource = "MessageHeader", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "MessageHeader", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Observation", Name = "value-string", Description = @"The value of the observation, if the value is a string, and also searches in CodeableConcept.text", Type = Conformance.SearchParamType.String, Path = new string[] { "Observation.value[x]", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "status", Description = @"The status of the observation", Type = Conformance.SearchParamType.Token, Path = new string[] { "Observation.status", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "subject", Description = @"The subject that the observation is about", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Observation.subject", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "value-concept", Description = @"The value of the observation, if the value is a CodeableConcept", Type = Conformance.SearchParamType.Token, Path = new string[] { "Observation.value[x]", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "reliability", Description = @"The reliability of the observation", Type = Conformance.SearchParamType.Token, Path = new string[] { "Observation.reliability", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "date", Description = @"Obtained date/time. If the obtained element is a period, a date that falls in the period", Type = Conformance.SearchParamType.Date, Path = new string[] { "Observation.applies[x]", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "name-value-[x]", Description = @"Both name and one of the value parameters", Type = Conformance.SearchParamType.Composite, CompositeParams = new string[] { "name", "value-[x]", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "related-target", Description = @"Observation that is related to this one", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Observation.related.target", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "related", Description = @"Related Observations - search on related-type and related-target together", Type = Conformance.SearchParamType.Composite, CompositeParams = new string[] { "related-target", "related-type", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Observation", Name = "specimen", Description = @"Specimen used for this observation", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Observation.specimen", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "name", Description = @"The name of the observation type", Type = Conformance.SearchParamType.Token, Path = new string[] { "Observation.name", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "related-type", Description = @"has-component | has-member | derived-from | sequel-to | replaces | qualified-by | interfered-by", Type = Conformance.SearchParamType.Token, Path = new string[] { "Observation.related.type", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "performer", Description = @"Who and/or what performed the observation", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Observation.performer", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Observation", Name = "value-quantity", Description = @"The value of the observation, if the value is a Quantity, or a SampledData (just search on the bounds of the values in sampled data)", Type = Conformance.SearchParamType.Quantity, Path = new string[] { "Observation.value[x]", } },
				new SearchParamDefinition() { Resource = "Observation", Name = "value-date", Description = @"The value of the observation, if the value is a Period", Type = Conformance.SearchParamType.Date, Path = new string[] { "Observation.value[x]", } },
				new SearchParamDefinition() { Resource = "OperationOutcome", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "OperationOutcome", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Order", Name = "authority", Description = @"If required by policy", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Order.authority", } },
				new SearchParamDefinition() { Resource = "Order", Name = "detail", Description = @"What action is being ordered", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Order.detail", } },
				new SearchParamDefinition() { Resource = "Order", Name = "source", Description = @"Who initiated the order", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Order.source", } },
				new SearchParamDefinition() { Resource = "Order", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Order", Name = "subject", Description = @"Patient this order is about", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Order.subject", } },
				new SearchParamDefinition() { Resource = "Order", Name = "when", Description = @"A formal schedule", Type = Conformance.SearchParamType.Date, Path = new string[] { "Order.when.schedule", } },
				new SearchParamDefinition() { Resource = "Order", Name = "target", Description = @"Who is intended to fulfill the order", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Order.target", } },
				new SearchParamDefinition() { Resource = "Order", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Order", Name = "when_code", Description = @"Code specifies when request should be done. The code may simply be a priority code", Type = Conformance.SearchParamType.Token, Path = new string[] { "Order.when.code", } },
				new SearchParamDefinition() { Resource = "Order", Name = "date", Description = @"When the order was made", Type = Conformance.SearchParamType.Date, Path = new string[] { "Order.date", } },
				new SearchParamDefinition() { Resource = "OrderResponse", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "OrderResponse", Name = "fulfillment", Description = @"Details of the outcome of performing the order", Type = Conformance.SearchParamType.Reference, Path = new string[] { "OrderResponse.fulfillment", } },
				new SearchParamDefinition() { Resource = "OrderResponse", Name = "request", Description = @"The order that this is a response to", Type = Conformance.SearchParamType.Reference, Path = new string[] { "OrderResponse.request", } },
				new SearchParamDefinition() { Resource = "OrderResponse", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "OrderResponse", Name = "code", Description = @"pending | review | rejected | error | accepted | cancelled | replaced | aborted | complete", Type = Conformance.SearchParamType.Token, Path = new string[] { "OrderResponse.code", } },
				new SearchParamDefinition() { Resource = "OrderResponse", Name = "date", Description = @"When the response was made", Type = Conformance.SearchParamType.Date, Path = new string[] { "OrderResponse.date", } },
				new SearchParamDefinition() { Resource = "OrderResponse", Name = "who", Description = @"Who made the response", Type = Conformance.SearchParamType.Reference, Path = new string[] { "OrderResponse.who", } },
				new SearchParamDefinition() { Resource = "Organization", Name = "phonetic", Description = @"A portion of the organization's name using some kind of phonetic matching algorithm", Type = Conformance.SearchParamType.String },
				new SearchParamDefinition() { Resource = "Organization", Name = "partof", Description = @"Search all organizations that are part of the given organization", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Organization.partOf", } },
				new SearchParamDefinition() { Resource = "Organization", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Organization", Name = "name", Description = @"A portion of the organization's name", Type = Conformance.SearchParamType.String, Path = new string[] { "Organization.name", } },
				new SearchParamDefinition() { Resource = "Organization", Name = "active", Description = @"Whether the organization's record is active", Type = Conformance.SearchParamType.Token, Path = new string[] { "Organization.active", } },
				new SearchParamDefinition() { Resource = "Organization", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Organization", Name = "type", Description = @"A code for the type of organization", Type = Conformance.SearchParamType.Token, Path = new string[] { "Organization.type", } },
				new SearchParamDefinition() { Resource = "Organization", Name = "identifier", Description = @"Any identifier for the organization (not the accreditation issuer's identifier)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Organization.identifier", } },
				new SearchParamDefinition() { Resource = "Other", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Other", Name = "created", Description = @"When created", Type = Conformance.SearchParamType.Date, Path = new string[] { "Other.created", } },
				new SearchParamDefinition() { Resource = "Other", Name = "subject", Description = @"Identifies the", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Other.subject", } },
				new SearchParamDefinition() { Resource = "Other", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Other", Name = "code", Description = @"Kind of Resource", Type = Conformance.SearchParamType.Token, Path = new string[] { "Other.code", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "animal-breed", Description = @"The breed for animal patients", Type = Conformance.SearchParamType.Token, Path = new string[] { "Patient.animal.breed", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "phonetic", Description = @"A portion of either family or given name using some kind of phonetic matching algorithm", Type = Conformance.SearchParamType.String },
				new SearchParamDefinition() { Resource = "Patient", Name = "link", Description = @"All patients linked to the given patient", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Patient.link.other", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "provider", Description = @"The organization at which this person is a patient", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Patient.managingOrganization", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "animal-species", Description = @"The species for animal patients", Type = Conformance.SearchParamType.Token, Path = new string[] { "Patient.animal.species", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Patient", Name = "given", Description = @"A portion of the given name of the patient", Type = Conformance.SearchParamType.String, Path = new string[] { "Patient.name.given", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "address", Description = @"An address in any kind of address/part of the patient", Type = Conformance.SearchParamType.String, Path = new string[] { "Patient.address", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "family", Description = @"A portion of the family name of the patient", Type = Conformance.SearchParamType.String, Path = new string[] { "Patient.name.family", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "name", Description = @"A portion of either family or given name of the patient", Type = Conformance.SearchParamType.String, Path = new string[] { "Patient.name", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "telecom", Description = @"The value in any kind of telecom details of the patient", Type = Conformance.SearchParamType.String, Path = new string[] { "Patient.telecom", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "birthdate", Description = @"The patient's date of birth", Type = Conformance.SearchParamType.Date, Path = new string[] { "Patient.birthDate", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "active", Description = @"Whether the patient record is active", Type = Conformance.SearchParamType.Token, Path = new string[] { "Patient.active", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "gender", Description = @"Gender of the patient", Type = Conformance.SearchParamType.Token, Path = new string[] { "Patient.gender", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Patient", Name = "language", Description = @"Language code (irrespective of use value)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Patient.communication", } },
				new SearchParamDefinition() { Resource = "Patient", Name = "identifier", Description = @"A patient identifier", Type = Conformance.SearchParamType.Token, Path = new string[] { "Patient.identifier", } },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "organization", Description = @"The identity of the organization the practitioner represents / acts on behalf of", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Practitioner.organization", } },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "phonetic", Description = @"A portion of either family or given name using some kind of phonetic matching algorithm", Type = Conformance.SearchParamType.String, Path = new string[] { "Practitioner.name", } },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "given", Description = @"A portion of the given name", Type = Conformance.SearchParamType.String, Path = new string[] { "Practitioner.name", } },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "address", Description = @"An address in any kind of address/part", Type = Conformance.SearchParamType.String, Path = new string[] { "Practitioner.address", } },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "family", Description = @"A portion of the family name", Type = Conformance.SearchParamType.String, Path = new string[] { "Practitioner.name", } },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "name", Description = @"A portion of either family or given name", Type = Conformance.SearchParamType.String, Path = new string[] { "Practitioner.name", } },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "telecom", Description = @"The value in any kind of contact", Type = Conformance.SearchParamType.String, Path = new string[] { "Practitioner.telecom", } },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "gender", Description = @"Gender of the practitioner", Type = Conformance.SearchParamType.Token, Path = new string[] { "Practitioner.gender", } },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Practitioner", Name = "identifier", Description = @"A practitioner's Identifier", Type = Conformance.SearchParamType.Token, Path = new string[] { "Practitioner.identifier", } },
				new SearchParamDefinition() { Resource = "Procedure", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Procedure", Name = "subject", Description = @"The identity of a patient to list procedures  for", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Procedure.subject", } },
				new SearchParamDefinition() { Resource = "Procedure", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Procedure", Name = "date", Description = @"The date the procedure was performed on", Type = Conformance.SearchParamType.Date, Path = new string[] { "Procedure.date", } },
				new SearchParamDefinition() { Resource = "Procedure", Name = "type", Description = @"Type of procedure", Type = Conformance.SearchParamType.Token, Path = new string[] { "Procedure.type", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "status", Description = @"The current status of the profile", Type = Conformance.SearchParamType.Token, Path = new string[] { "Profile.status", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "code", Description = @"A code for the profile in the format uri::code (server may choose to do subsumption)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Profile.code", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "type", Description = @"Type of resource that is constrained in the profile", Type = Conformance.SearchParamType.Token, Path = new string[] { "Profile.structure.type", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "date", Description = @"The profile publication date", Type = Conformance.SearchParamType.Date, Path = new string[] { "Profile.date", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "version", Description = @"The version identifier of the profile", Type = Conformance.SearchParamType.Token, Path = new string[] { "Profile.version", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "publisher", Description = @"Name of the publisher of the profile", Type = Conformance.SearchParamType.String, Path = new string[] { "Profile.publisher", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "extension", Description = @"An extension code (use or definition)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Profile.extensionDefn.code", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Profile", Name = "valueset", Description = @"A vocabulary binding code", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Profile.structure.element.definition.binding.reference[x]", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "description", Description = @"Text search in the description of the profile", Type = Conformance.SearchParamType.String, Path = new string[] { "Profile.description", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "name", Description = @"Name of the profile", Type = Conformance.SearchParamType.String, Path = new string[] { "Profile.name", } },
				new SearchParamDefinition() { Resource = "Profile", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Profile", Name = "identifier", Description = @"The identifier of the profile", Type = Conformance.SearchParamType.Token, Path = new string[] { "Profile.identifier", } },
				new SearchParamDefinition() { Resource = "Provenance", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Provenance", Name = "location", Description = @"Where the activity occurred, if relevant", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Provenance.location", } },
				new SearchParamDefinition() { Resource = "Provenance", Name = "start", Description = @"Starting time with inclusive boundary", Type = Conformance.SearchParamType.Date, Path = new string[] { "Provenance.period.start", } },
				new SearchParamDefinition() { Resource = "Provenance", Name = "partytype", Description = @"e.g. Resource | Person | Application | Record | Document +", Type = Conformance.SearchParamType.Token, Path = new string[] { "Provenance.agent.type", } },
				new SearchParamDefinition() { Resource = "Provenance", Name = "target", Description = @"Target resource(s) (usually version specific)", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Provenance.target", } },
				new SearchParamDefinition() { Resource = "Provenance", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Provenance", Name = "party", Description = @"Identity of agent (urn or url)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Provenance.agent.reference", } },
				new SearchParamDefinition() { Resource = "Provenance", Name = "end", Description = @"End time with inclusive boundary, if not ongoing", Type = Conformance.SearchParamType.Date, Path = new string[] { "Provenance.period.end", } },
				new SearchParamDefinition() { Resource = "Query", Name = "response", Description = @"Links response to source query", Type = Conformance.SearchParamType.Token, Path = new string[] { "Query.response.identifier", } },
				new SearchParamDefinition() { Resource = "Query", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Query", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Query", Name = "identifier", Description = @"Links query and its response(s)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Query.identifier", } },
				new SearchParamDefinition() { Resource = "Questionnaire", Name = "author", Description = @"The author of the questionnaire", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Questionnaire.author", } },
				new SearchParamDefinition() { Resource = "Questionnaire", Name = "authored", Description = @"When the questionnaire was authored", Type = Conformance.SearchParamType.Date, Path = new string[] { "Questionnaire.authored", } },
				new SearchParamDefinition() { Resource = "Questionnaire", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Questionnaire", Name = "status", Description = @"The status of the questionnaire", Type = Conformance.SearchParamType.Token, Path = new string[] { "Questionnaire.status", } },
				new SearchParamDefinition() { Resource = "Questionnaire", Name = "subject", Description = @"The subject of the questionnaire", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Questionnaire.subject", } },
				new SearchParamDefinition() { Resource = "Questionnaire", Name = "name", Description = @"Name of the questionnaire", Type = Conformance.SearchParamType.Token, Path = new string[] { "Questionnaire.name", } },
				new SearchParamDefinition() { Resource = "Questionnaire", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Questionnaire", Name = "encounter", Description = @"Encounter during which questionnaire was authored", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Questionnaire.encounter", } },
				new SearchParamDefinition() { Resource = "Questionnaire", Name = "identifier", Description = @"An identifier for the questionnaire", Type = Conformance.SearchParamType.Token, Path = new string[] { "Questionnaire.identifier", } },
				new SearchParamDefinition() { Resource = "RelatedPerson", Name = "patient", Description = @"The patient this person is related to", Type = Conformance.SearchParamType.Reference, Path = new string[] { "RelatedPerson.patient", } },
				new SearchParamDefinition() { Resource = "RelatedPerson", Name = "phonetic", Description = @"A portion of name using some kind of phonetic matching algorithm", Type = Conformance.SearchParamType.String },
				new SearchParamDefinition() { Resource = "RelatedPerson", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "RelatedPerson", Name = "address", Description = @"An address in any kind of address/part", Type = Conformance.SearchParamType.String, Path = new string[] { "RelatedPerson.address", } },
				new SearchParamDefinition() { Resource = "RelatedPerson", Name = "name", Description = @"A portion of name in any name part", Type = Conformance.SearchParamType.String, Path = new string[] { "RelatedPerson.name", } },
				new SearchParamDefinition() { Resource = "RelatedPerson", Name = "telecom", Description = @"The value in any kind of contact", Type = Conformance.SearchParamType.String, Path = new string[] { "RelatedPerson.telecom", } },
				new SearchParamDefinition() { Resource = "RelatedPerson", Name = "gender", Description = @"Gender of the person", Type = Conformance.SearchParamType.Token, Path = new string[] { "RelatedPerson.gender", } },
				new SearchParamDefinition() { Resource = "RelatedPerson", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "RelatedPerson", Name = "identifier", Description = @"A patient Identifier", Type = Conformance.SearchParamType.Token, Path = new string[] { "RelatedPerson.identifier", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "site", Description = @"Logical source location within the enterprise", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.source.site", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "desc", Description = @"Instance-specific descriptor for Object", Type = Conformance.SearchParamType.String, Path = new string[] { "SecurityEvent.object.name", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "type", Description = @"Type/identifier of event", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.event.type", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "date", Description = @"Time when the event occurred on source", Type = Conformance.SearchParamType.Date, Path = new string[] { "SecurityEvent.event.dateTime", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "reference", Description = @"Specific instance of resource (e.g. versioned)", Type = Conformance.SearchParamType.Reference, Path = new string[] { "SecurityEvent.object.reference", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "identity", Description = @"Specific instance of object (e.g. versioned)", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.object.identifier", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "altid", Description = @"Alternative User id e.g. authentication", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.participant.altId", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "patientid", Description = @"The id of the patient (one of multiple kinds of participations)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "source", Description = @"The id of source where event originated", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.source.identifier", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "address", Description = @"Identifier for the network access point of the user device", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.participant.network.identifier", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "subtype", Description = @"More specific type/id for the event", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.event.subtype", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "name", Description = @"Human-meaningful name for the user", Type = Conformance.SearchParamType.String, Path = new string[] { "SecurityEvent.participant.name", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "action", Description = @"Type of action performed during the event", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.event.action", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "object-type", Description = @"Object type being audited", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.object.type", } },
				new SearchParamDefinition() { Resource = "SecurityEvent", Name = "user", Description = @"Unique identifier for the user", Type = Conformance.SearchParamType.Token, Path = new string[] { "SecurityEvent.participant.userId", } },
				new SearchParamDefinition() { Resource = "Specimen", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Specimen", Name = "subject", Description = @"The subject of the specimen", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Specimen.subject", } },
				new SearchParamDefinition() { Resource = "Specimen", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Substance", Name = "substance", Description = @"A component of the substance", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Substance.ingredient.substance", } },
				new SearchParamDefinition() { Resource = "Substance", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Substance", Name = "quantity", Description = @"Amount of substance in the package", Type = Conformance.SearchParamType.Number, Path = new string[] { "Substance.instance.quantity", } },
				new SearchParamDefinition() { Resource = "Substance", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Substance", Name = "type", Description = @"The type of the substance", Type = Conformance.SearchParamType.Token, Path = new string[] { "Substance.type", } },
				new SearchParamDefinition() { Resource = "Substance", Name = "identifier", Description = @"Identifier of the package/container", Type = Conformance.SearchParamType.Token, Path = new string[] { "Substance.instance.identifier", } },
				new SearchParamDefinition() { Resource = "Substance", Name = "expiry", Description = @"When no longer valid to use", Type = Conformance.SearchParamType.Date, Path = new string[] { "Substance.instance.expiry", } },
				new SearchParamDefinition() { Resource = "Supply", Name = "patient", Description = @"Patient for whom the item is supplied", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Supply.patient", } },
				new SearchParamDefinition() { Resource = "Supply", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Supply", Name = "status", Description = @"requested | dispensed | received | failed | cancelled", Type = Conformance.SearchParamType.Token, Path = new string[] { "Supply.status", } },
				new SearchParamDefinition() { Resource = "Supply", Name = "dispenseid", Description = @"External identifier", Type = Conformance.SearchParamType.Token, Path = new string[] { "Supply.dispense.identifier", } },
				new SearchParamDefinition() { Resource = "Supply", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "Supply", Name = "identifier", Description = @"Unique identifier", Type = Conformance.SearchParamType.Token, Path = new string[] { "Supply.identifier", } },
				new SearchParamDefinition() { Resource = "Supply", Name = "supplier", Description = @"Dispenser", Type = Conformance.SearchParamType.Reference, Path = new string[] { "Supply.dispense.supplier", } },
				new SearchParamDefinition() { Resource = "Supply", Name = "kind", Description = @"The kind of supply (central, non-stock, etc)", Type = Conformance.SearchParamType.Token, Path = new string[] { "Supply.kind", } },
				new SearchParamDefinition() { Resource = "Supply", Name = "dispensestatus", Description = @"in progress | dispensed | abandoned", Type = Conformance.SearchParamType.Token, Path = new string[] { "Supply.dispense.status", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "system", Description = @"The system for any codes defined by this value set", Type = Conformance.SearchParamType.Token, Path = new string[] { "ValueSet.define.system", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "status", Description = @"The status of the value set", Type = Conformance.SearchParamType.Token, Path = new string[] { "ValueSet.status", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "description", Description = @"Text search in the description of the value set", Type = Conformance.SearchParamType.String, Path = new string[] { "ValueSet.description", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "name", Description = @"The name of the value set", Type = Conformance.SearchParamType.String, Path = new string[] { "ValueSet.name", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "_language", Description = @"The language of the resource", Type = Conformance.SearchParamType.Token },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "code", Description = @"A code defined in the value set", Type = Conformance.SearchParamType.Token, Path = new string[] { "ValueSet.define.concept.code", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "date", Description = @"The value set publication date", Type = Conformance.SearchParamType.Date, Path = new string[] { "ValueSet.date", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "identifier", Description = @"The identifier of the value set", Type = Conformance.SearchParamType.Token, Path = new string[] { "ValueSet.identifier", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "reference", Description = @"A code system included or excluded in the value set or an imported value set", Type = Conformance.SearchParamType.Token, Path = new string[] { "ValueSet.compose.include.system", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "publisher", Description = @"Name of the publisher of the value set", Type = Conformance.SearchParamType.String, Path = new string[] { "ValueSet.publisher", } },
				new SearchParamDefinition() { Resource = "ValueSet", Name = "version", Description = @"The version identifier of the value set", Type = Conformance.SearchParamType.Token, Path = new string[] { "ValueSet.version", } },
			};
	}
}
