using Hl7.Fhir.Introspection;
using Hl7.Fhir.Support;
using Hl7.Fhir.Validation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;

/*
  Copyright (c) 2011-2013, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  

*/

//
// Generated on Thu, Oct 23, 2014 14:22+0200 for FHIR v0.0.82
//
namespace Hl7.Fhir.Model
{
	/// <summary>
	/// A reference to a document
	/// </summary>
	[FhirType("DocumentReference", IsResource = true)]
	[DataContract]
	public partial class DocumentReference : Hl7.Fhir.Model.Resource
	{
		/// <summary>
		/// The type of relationship between documents
		/// </summary>
		[FhirEnumeration("DocumentRelationshipType")]
		public enum DocumentRelationshipType
		{
			/// <summary>
			/// This document logically replaces or supercedes the target document.
			/// </summary>
			[EnumLiteral("replaces")]
			Replaces,
			/// <summary>
			/// This document was generated by transforming the target document (e.g. format or language conversion).
			/// </summary>
			[EnumLiteral("transforms")]
			Transforms,
			/// <summary>
			/// This document is a signature of the target document.
			/// </summary>
			[EnumLiteral("signs")]
			Signs,
			/// <summary>
			/// This document adds additional information to the target document.
			/// </summary>
			[EnumLiteral("appends")]
			Appends,
		}

		/// <summary>
		/// The status of the document reference
		/// </summary>
		[FhirEnumeration("DocumentReferenceStatus")]
		public enum DocumentReferenceStatus
		{
			/// <summary>
			/// This is the current reference for this document.
			/// </summary>
			[EnumLiteral("current")]
			Current,
			/// <summary>
			/// This reference has been superseded by another reference.
			/// </summary>
			[EnumLiteral("superceded")]
			Superceded,
			/// <summary>
			/// This reference was created in error.
			/// </summary>
			[EnumLiteral("entered in error")]
			EnteredInError,
		}

		[FhirType("DocumentReferenceContextComponent")]
		[DataContract]
		public partial class DocumentReferenceContextComponent : Hl7.Fhir.Model.Element
		{
			/// <summary>
			/// Main Clinical Acts Documented
			/// </summary>
			[FhirElement("event", InSummary = true, Order = 40)]
			[Cardinality(Min = 0, Max = -1)]
			[DataMember]
			public List<Hl7.Fhir.Model.CodeableConcept> Event { get; set; }

			/// <summary>
			/// Time of service that is being documented
			/// </summary>
			[FhirElement("period", InSummary = true, Order = 50)]
			[DataMember]
			public Hl7.Fhir.Model.Period Period { get; set; }

			/// <summary>
			/// Kind of facility where patient was seen
			/// </summary>
			[FhirElement("facilityType", InSummary = true, Order = 60)]
			[DataMember]
			public Hl7.Fhir.Model.CodeableConcept FacilityType { get; set; }

			public override IDeepCopyable CopyTo(IDeepCopyable other)
			{
				var dest = other as DocumentReferenceContextComponent;

				if (dest != null)
				{
					base.CopyTo(dest);
					if (Event != null) dest.Event = new List<Hl7.Fhir.Model.CodeableConcept>(Event.DeepCopy());
					if (Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
					if (FacilityType != null) dest.FacilityType = (Hl7.Fhir.Model.CodeableConcept)FacilityType.DeepCopy();
					return dest;
				}
				else
					throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
			}

			public override IDeepCopyable DeepCopy()
			{
				return CopyTo(new DocumentReferenceContextComponent());
			}

			public override bool Matches(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceContextComponent;
				if (otherT is null) return false;

				if (!base.Matches(otherT)) return false;
				if (!DeepComparable.Matches(Event, otherT.Event)) return false;
				if (!DeepComparable.Matches(Period, otherT.Period)) return false;
				if (!DeepComparable.Matches(FacilityType, otherT.FacilityType)) return false;

				return true;
			}

			public override bool IsExactly(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceContextComponent;
				if (otherT is null) return false;

				if (!base.IsExactly(otherT)) return false;
				if (!DeepComparable.IsExactly(Event, otherT.Event)) return false;
				if (!DeepComparable.IsExactly(Period, otherT.Period)) return false;
				if (!DeepComparable.IsExactly(FacilityType, otherT.FacilityType)) return false;

				return true;
			}

		}


		[FhirType("DocumentReferenceRelatesToComponent")]
		[DataContract]
		public partial class DocumentReferenceRelatesToComponent : Hl7.Fhir.Model.Element
		{
			/// <summary>
			/// replaces | transforms | signs | appends
			/// </summary>
			[FhirElement("code", InSummary = true, Order = 40)]
			[Cardinality(Min = 1, Max = 1)]
			[DataMember]
			public Code<Hl7.Fhir.Model.DocumentReference.DocumentRelationshipType> CodeElement { get; set; }

			/// <summary>
			/// replaces | transforms | signs | appends
			/// </summary>
			/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
			[NotMapped]
			[IgnoreDataMember]
			public Hl7.Fhir.Model.DocumentReference.DocumentRelationshipType? Code
			{
				get { return CodeElement?.Value; }
				set
				{
					if (value is null)
						CodeElement = null;
					else
						CodeElement = new Code<Hl7.Fhir.Model.DocumentReference.DocumentRelationshipType>(value);
				}
			}

			/// <summary>
			/// Target of the relationship
			/// </summary>
			[FhirElement("target", InSummary = true, Order = 50)]
			[References("DocumentReference")]
			[Cardinality(Min = 1, Max = 1)]
			[DataMember]
			public Hl7.Fhir.Model.ResourceReference Target { get; set; }

			public override IDeepCopyable CopyTo(IDeepCopyable other)
			{
				var dest = other as DocumentReferenceRelatesToComponent;

				if (dest != null)
				{
					base.CopyTo(dest);
					if (CodeElement != null) dest.CodeElement = (Code<Hl7.Fhir.Model.DocumentReference.DocumentRelationshipType>)CodeElement.DeepCopy();
					if (Target != null) dest.Target = (Hl7.Fhir.Model.ResourceReference)Target.DeepCopy();
					return dest;
				}
				else
					throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
			}

			public override IDeepCopyable DeepCopy()
			{
				return CopyTo(new DocumentReferenceRelatesToComponent());
			}

			public override bool Matches(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceRelatesToComponent;
				if (otherT is null) return false;

				if (!base.Matches(otherT)) return false;
				if (!DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
				if (!DeepComparable.Matches(Target, otherT.Target)) return false;

				return true;
			}

			public override bool IsExactly(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceRelatesToComponent;
				if (otherT is null) return false;

				if (!base.IsExactly(otherT)) return false;
				if (!DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
				if (!DeepComparable.IsExactly(Target, otherT.Target)) return false;

				return true;
			}

		}


		[FhirType("DocumentReferenceServiceParameterComponent")]
		[DataContract]
		public partial class DocumentReferenceServiceParameterComponent : Hl7.Fhir.Model.Element
		{
			/// <summary>
			/// Parameter name in service call
			/// </summary>
			[FhirElement("name", InSummary = true, Order = 40)]
			[Cardinality(Min = 1, Max = 1)]
			[DataMember]
			public Hl7.Fhir.Model.FhirString NameElement { get; set; }

			/// <summary>
			/// Parameter name in service call
			/// </summary>
			/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
			[NotMapped]
			[IgnoreDataMember]
			public string Name
			{
				get { return NameElement?.Value; }
				set
				{
					if (value is null)
						NameElement = null;
					else
						NameElement = new Hl7.Fhir.Model.FhirString(value);
				}
			}

			/// <summary>
			/// Parameter value for the name
			/// </summary>
			[FhirElement("value", InSummary = true, Order = 50)]
			[DataMember]
			public Hl7.Fhir.Model.FhirString ValueElement { get; set; }

			/// <summary>
			/// Parameter value for the name
			/// </summary>
			/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
			[NotMapped]
			[IgnoreDataMember]
			public string Value
			{
				get { return ValueElement?.Value; }
				set
				{
					if (value is null)
						ValueElement = null;
					else
						ValueElement = new Hl7.Fhir.Model.FhirString(value);
				}
			}

			public override IDeepCopyable CopyTo(IDeepCopyable other)
			{
				var dest = other as DocumentReferenceServiceParameterComponent;

				if (dest != null)
				{
					base.CopyTo(dest);
					if (NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
					if (ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
					return dest;
				}
				else
					throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
			}

			public override IDeepCopyable DeepCopy()
			{
				return CopyTo(new DocumentReferenceServiceParameterComponent());
			}

			public override bool Matches(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceServiceParameterComponent;
				if (otherT is null) return false;

				if (!base.Matches(otherT)) return false;
				if (!DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
				if (!DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

				return true;
			}

			public override bool IsExactly(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceServiceParameterComponent;
				if (otherT is null) return false;

				if (!base.IsExactly(otherT)) return false;
				if (!DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
				if (!DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

				return true;
			}

		}


		[FhirType("DocumentReferenceServiceComponent")]
		[DataContract]
		public partial class DocumentReferenceServiceComponent : Hl7.Fhir.Model.Element
		{
			/// <summary>
			/// Type of service (i.e. XDS.b)
			/// </summary>
			[FhirElement("type", InSummary = true, Order = 40)]
			[Cardinality(Min = 1, Max = 1)]
			[DataMember]
			public Hl7.Fhir.Model.CodeableConcept Type { get; set; }

			/// <summary>
			/// Where service is located (usually a URL)
			/// </summary>
			[FhirElement("address", InSummary = true, Order = 50)]
			[DataMember]
			public Hl7.Fhir.Model.FhirString AddressElement { get; set; }

			/// <summary>
			/// Where service is located (usually a URL)
			/// </summary>
			/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
			[NotMapped]
			[IgnoreDataMember]
			public string Address
			{
				get { return AddressElement?.Value; }
				set
				{
					if (value is null)
						AddressElement = null;
					else
						AddressElement = new Hl7.Fhir.Model.FhirString(value);
				}
			}

			/// <summary>
			/// Service call parameters
			/// </summary>
			[FhirElement("parameter", InSummary = true, Order = 60)]
			[Cardinality(Min = 0, Max = -1)]
			[DataMember]
			public List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceParameterComponent> Parameter { get; set; }

			public override IDeepCopyable CopyTo(IDeepCopyable other)
			{
				var dest = other as DocumentReferenceServiceComponent;

				if (dest != null)
				{
					base.CopyTo(dest);
					if (Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
					if (AddressElement != null) dest.AddressElement = (Hl7.Fhir.Model.FhirString)AddressElement.DeepCopy();
					if (Parameter != null) dest.Parameter = new List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceParameterComponent>(Parameter.DeepCopy());
					return dest;
				}
				else
					throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
			}

			public override IDeepCopyable DeepCopy()
			{
				return CopyTo(new DocumentReferenceServiceComponent());
			}

			public override bool Matches(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceServiceComponent;
				if (otherT is null) return false;

				if (!base.Matches(otherT)) return false;
				if (!DeepComparable.Matches(Type, otherT.Type)) return false;
				if (!DeepComparable.Matches(AddressElement, otherT.AddressElement)) return false;
				if (!DeepComparable.Matches(Parameter, otherT.Parameter)) return false;

				return true;
			}

			public override bool IsExactly(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceServiceComponent;
				if (otherT is null) return false;

				if (!base.IsExactly(otherT)) return false;
				if (!DeepComparable.IsExactly(Type, otherT.Type)) return false;
				if (!DeepComparable.IsExactly(AddressElement, otherT.AddressElement)) return false;
				if (!DeepComparable.IsExactly(Parameter, otherT.Parameter)) return false;

				return true;
			}

		}


		/// <summary>
		/// Master Version Specific Identifier
		/// </summary>
		[FhirElement("masterIdentifier", Order = 70)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.Identifier MasterIdentifier { get; set; }

		/// <summary>
		/// Other identifiers for the document
		/// </summary>
		[FhirElement("identifier", Order = 80)]
		[Cardinality(Min = 0, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.Identifier> Identifier { get; set; }

		/// <summary>
		/// Who|what is the subject of the document
		/// </summary>
		[FhirElement("subject", Order = 90)]
		[References("Patient", "Practitioner", "Group", "Device")]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.ResourceReference Subject { get; set; }

		/// <summary>
		/// What kind of document this is (LOINC if possible)
		/// </summary>
		[FhirElement("type", Order = 100)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.CodeableConcept Type { get; set; }

		/// <summary>
		/// Categorization of Document
		/// </summary>
		[FhirElement("class", Order = 110)]
		[DataMember]
		public Hl7.Fhir.Model.CodeableConcept Class { get; set; }

		/// <summary>
		/// Who and/or what authored the document
		/// </summary>
		[FhirElement("author", Order = 120)]
		[References("Practitioner", "Device", "Patient", "RelatedPerson")]
		[Cardinality(Min = 1, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.ResourceReference> Author { get; set; }

		/// <summary>
		/// Org which maintains the document
		/// </summary>
		[FhirElement("custodian", Order = 130)]
		[References("Organization")]
		[DataMember]
		public Hl7.Fhir.Model.ResourceReference Custodian { get; set; }

		/// <summary>
		/// Manages access policies for the document
		/// </summary>
		[FhirElement("policyManager", Order = 140)]
		[DataMember]
		public Hl7.Fhir.Model.FhirUri PolicyManagerElement { get; set; }

		/// <summary>
		/// Manages access policies for the document
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string PolicyManager
		{
			get { return PolicyManagerElement?.Value; }
			set
			{
				if (value is null)
					PolicyManagerElement = null;
				else
					PolicyManagerElement = new Hl7.Fhir.Model.FhirUri(value);
			}
		}

		/// <summary>
		/// Who/What authenticated the document
		/// </summary>
		[FhirElement("authenticator", Order = 150)]
		[References("Practitioner", "Organization")]
		[DataMember]
		public Hl7.Fhir.Model.ResourceReference Authenticator { get; set; }

		/// <summary>
		/// Document creation time
		/// </summary>
		[FhirElement("created", Order = 160)]
		[DataMember]
		public Hl7.Fhir.Model.FhirDateTime CreatedElement { get; set; }

		/// <summary>
		/// Document creation time
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string Created
		{
			get { return CreatedElement?.Value; }
			set
			{
				if (value is null)
					CreatedElement = null;
				else
					CreatedElement = new Hl7.Fhir.Model.FhirDateTime(value);
			}
		}

		/// <summary>
		/// When this document reference created
		/// </summary>
		[FhirElement("indexed", Order = 170)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.Instant IndexedElement { get; set; }

		/// <summary>
		/// When this document reference created
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public DateTimeOffset? Indexed
		{
			get { return IndexedElement?.Value; }
			set
			{
				if (value is null)
					IndexedElement = null;
				else
					IndexedElement = new Hl7.Fhir.Model.Instant(value);
			}
		}

		/// <summary>
		/// current | superceded | entered in error
		/// </summary>
		[FhirElement("status", Order = 180)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus> StatusElement { get; set; }

		/// <summary>
		/// current | superceded | entered in error
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus? Status
		{
			get { return StatusElement?.Value; }
			set
			{
				if (value is null)
					StatusElement = null;
				else
					StatusElement = new Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus>(value);
			}
		}

		/// <summary>
		/// preliminary | final | appended | amended | entered in error
		/// </summary>
		[FhirElement("docStatus", Order = 190)]
		[DataMember]
		public Hl7.Fhir.Model.CodeableConcept DocStatus { get; set; }

		/// <summary>
		/// Relationships to other documents
		/// </summary>
		[FhirElement("relatesTo", Order = 200)]
		[Cardinality(Min = 0, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceRelatesToComponent> RelatesTo { get; set; }

		/// <summary>
		/// Human-readable description (title)
		/// </summary>
		[FhirElement("description", Order = 210)]
		[DataMember]
		public Hl7.Fhir.Model.FhirString DescriptionElement { get; set; }

		/// <summary>
		/// Human-readable description (title)
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string Description
		{
			get { return DescriptionElement?.Value; }
			set
			{
				if (value is null)
					DescriptionElement = null;
				else
					DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
			}
		}

		/// <summary>
		/// Sensitivity of source document
		/// </summary>
		[FhirElement("confidentiality", Order = 220)]
		[Cardinality(Min = 0, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.CodeableConcept> Confidentiality { get; set; }

		/// <summary>
		/// The marked primary language for the document
		/// </summary>
		[FhirElement("primaryLanguage", Order = 230)]
		[DataMember]
		public Hl7.Fhir.Model.Code PrimaryLanguageElement { get; set; }

		/// <summary>
		/// The marked primary language for the document
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string PrimaryLanguage
		{
			get { return PrimaryLanguageElement?.Value; }
			set
			{
				if (value is null)
					PrimaryLanguageElement = null;
				else
					PrimaryLanguageElement = new Hl7.Fhir.Model.Code(value);
			}
		}

		/// <summary>
		/// Mime type, + maybe character encoding
		/// </summary>
		[FhirElement("mimeType", Order = 240)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.Code MimeTypeElement { get; set; }

		/// <summary>
		/// Mime type, + maybe character encoding
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string MimeType
		{
			get { return MimeTypeElement?.Value; }
			set
			{
				if (value is null)
					MimeTypeElement = null;
				else
					MimeTypeElement = new Hl7.Fhir.Model.Code(value);
			}
		}

		/// <summary>
		/// Format/content rules for the document
		/// </summary>
		[FhirElement("format", Order = 250)]
		[Cardinality(Min = 0, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.FhirUri> FormatElement { get; set; }

		/// <summary>
		/// Format/content rules for the document
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public IEnumerable<string> Format
		{
			get { return FormatElement?.Select(elem => elem.Value); }
			set
			{
				if (value is null)
					FormatElement = null;
				else
					FormatElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem => new Hl7.Fhir.Model.FhirUri(elem)));
			}
		}

		/// <summary>
		/// Size of the document in bytes
		/// </summary>
		[FhirElement("size", Order = 260)]
		[DataMember]
		public Hl7.Fhir.Model.Integer SizeElement { get; set; }

		/// <summary>
		/// Size of the document in bytes
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public int? Size
		{
			get { return SizeElement?.Value; }
			set
			{
				if (value is null)
					SizeElement = null;
				else
					SizeElement = new Hl7.Fhir.Model.Integer(value);
			}
		}

		/// <summary>
		/// HexBinary representation of SHA1
		/// </summary>
		[FhirElement("hash", Order = 270)]
		[DataMember]
		public Hl7.Fhir.Model.FhirString HashElement { get; set; }

		/// <summary>
		/// HexBinary representation of SHA1
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string Hash
		{
			get { return HashElement?.Value; }
			set
			{
				if (value is null)
					HashElement = null;
				else
					HashElement = new Hl7.Fhir.Model.FhirString(value);
			}
		}

		/// <summary>
		/// Where to access the document
		/// </summary>
		[FhirElement("location", Order = 280)]
		[DataMember]
		public Hl7.Fhir.Model.FhirUri LocationElement { get; set; }

		/// <summary>
		/// Where to access the document
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string Location
		{
			get { return LocationElement?.Value; }
			set
			{
				if (value is null)
					LocationElement = null;
				else
					LocationElement = new Hl7.Fhir.Model.FhirUri(value);
			}
		}

		/// <summary>
		/// If access is not fully described by location
		/// </summary>
		[FhirElement("service", Order = 290)]
		[DataMember]
		public Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceComponent Service { get; set; }

		/// <summary>
		/// Clinical context of document
		/// </summary>
		[FhirElement("context", Order = 300)]
		[DataMember]
		public Hl7.Fhir.Model.DocumentReference.DocumentReferenceContextComponent Context { get; set; }

		public override IDeepCopyable CopyTo(IDeepCopyable other)
		{
			var dest = other as DocumentReference;

			if (dest != null)
			{
				base.CopyTo(dest);
				if (MasterIdentifier != null) dest.MasterIdentifier = (Hl7.Fhir.Model.Identifier)MasterIdentifier.DeepCopy();
				if (Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
				if (Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
				if (Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
				if (Class != null) dest.Class = (Hl7.Fhir.Model.CodeableConcept)Class.DeepCopy();
				if (Author != null) dest.Author = new List<Hl7.Fhir.Model.ResourceReference>(Author.DeepCopy());
				if (Custodian != null) dest.Custodian = (Hl7.Fhir.Model.ResourceReference)Custodian.DeepCopy();
				if (PolicyManagerElement != null) dest.PolicyManagerElement = (Hl7.Fhir.Model.FhirUri)PolicyManagerElement.DeepCopy();
				if (Authenticator != null) dest.Authenticator = (Hl7.Fhir.Model.ResourceReference)Authenticator.DeepCopy();
				if (CreatedElement != null) dest.CreatedElement = (Hl7.Fhir.Model.FhirDateTime)CreatedElement.DeepCopy();
				if (IndexedElement != null) dest.IndexedElement = (Hl7.Fhir.Model.Instant)IndexedElement.DeepCopy();
				if (StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus>)StatusElement.DeepCopy();
				if (DocStatus != null) dest.DocStatus = (Hl7.Fhir.Model.CodeableConcept)DocStatus.DeepCopy();
				if (RelatesTo != null) dest.RelatesTo = new List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceRelatesToComponent>(RelatesTo.DeepCopy());
				if (DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
				if (Confidentiality != null) dest.Confidentiality = new List<Hl7.Fhir.Model.CodeableConcept>(Confidentiality.DeepCopy());
				if (PrimaryLanguageElement != null) dest.PrimaryLanguageElement = (Hl7.Fhir.Model.Code)PrimaryLanguageElement.DeepCopy();
				if (MimeTypeElement != null) dest.MimeTypeElement = (Hl7.Fhir.Model.Code)MimeTypeElement.DeepCopy();
				if (FormatElement != null) dest.FormatElement = new List<Hl7.Fhir.Model.FhirUri>(FormatElement.DeepCopy());
				if (SizeElement != null) dest.SizeElement = (Hl7.Fhir.Model.Integer)SizeElement.DeepCopy();
				if (HashElement != null) dest.HashElement = (Hl7.Fhir.Model.FhirString)HashElement.DeepCopy();
				if (LocationElement != null) dest.LocationElement = (Hl7.Fhir.Model.FhirUri)LocationElement.DeepCopy();
				if (Service != null) dest.Service = (Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceComponent)Service.DeepCopy();
				if (Context != null) dest.Context = (Hl7.Fhir.Model.DocumentReference.DocumentReferenceContextComponent)Context.DeepCopy();
				return dest;
			}
			else
				throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
		}

		public override IDeepCopyable DeepCopy()
		{
			return CopyTo(new DocumentReference());
		}

		public override bool Matches(IDeepComparable other)
		{
			var otherT = other as DocumentReference;
			if (otherT is null) return false;

			if (!base.Matches(otherT)) return false;
			if (!DeepComparable.Matches(MasterIdentifier, otherT.MasterIdentifier)) return false;
			if (!DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
			if (!DeepComparable.Matches(Subject, otherT.Subject)) return false;
			if (!DeepComparable.Matches(Type, otherT.Type)) return false;
			if (!DeepComparable.Matches(Class, otherT.Class)) return false;
			if (!DeepComparable.Matches(Author, otherT.Author)) return false;
			if (!DeepComparable.Matches(Custodian, otherT.Custodian)) return false;
			if (!DeepComparable.Matches(PolicyManagerElement, otherT.PolicyManagerElement)) return false;
			if (!DeepComparable.Matches(Authenticator, otherT.Authenticator)) return false;
			if (!DeepComparable.Matches(CreatedElement, otherT.CreatedElement)) return false;
			if (!DeepComparable.Matches(IndexedElement, otherT.IndexedElement)) return false;
			if (!DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
			if (!DeepComparable.Matches(DocStatus, otherT.DocStatus)) return false;
			if (!DeepComparable.Matches(RelatesTo, otherT.RelatesTo)) return false;
			if (!DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
			if (!DeepComparable.Matches(Confidentiality, otherT.Confidentiality)) return false;
			if (!DeepComparable.Matches(PrimaryLanguageElement, otherT.PrimaryLanguageElement)) return false;
			if (!DeepComparable.Matches(MimeTypeElement, otherT.MimeTypeElement)) return false;
			if (!DeepComparable.Matches(FormatElement, otherT.FormatElement)) return false;
			if (!DeepComparable.Matches(SizeElement, otherT.SizeElement)) return false;
			if (!DeepComparable.Matches(HashElement, otherT.HashElement)) return false;
			if (!DeepComparable.Matches(LocationElement, otherT.LocationElement)) return false;
			if (!DeepComparable.Matches(Service, otherT.Service)) return false;
			if (!DeepComparable.Matches(Context, otherT.Context)) return false;

			return true;
		}

		public override bool IsExactly(IDeepComparable other)
		{
			var otherT = other as DocumentReference;
			if (otherT is null) return false;

			if (!base.IsExactly(otherT)) return false;
			if (!DeepComparable.IsExactly(MasterIdentifier, otherT.MasterIdentifier)) return false;
			if (!DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
			if (!DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
			if (!DeepComparable.IsExactly(Type, otherT.Type)) return false;
			if (!DeepComparable.IsExactly(Class, otherT.Class)) return false;
			if (!DeepComparable.IsExactly(Author, otherT.Author)) return false;
			if (!DeepComparable.IsExactly(Custodian, otherT.Custodian)) return false;
			if (!DeepComparable.IsExactly(PolicyManagerElement, otherT.PolicyManagerElement)) return false;
			if (!DeepComparable.IsExactly(Authenticator, otherT.Authenticator)) return false;
			if (!DeepComparable.IsExactly(CreatedElement, otherT.CreatedElement)) return false;
			if (!DeepComparable.IsExactly(IndexedElement, otherT.IndexedElement)) return false;
			if (!DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
			if (!DeepComparable.IsExactly(DocStatus, otherT.DocStatus)) return false;
			if (!DeepComparable.IsExactly(RelatesTo, otherT.RelatesTo)) return false;
			if (!DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
			if (!DeepComparable.IsExactly(Confidentiality, otherT.Confidentiality)) return false;
			if (!DeepComparable.IsExactly(PrimaryLanguageElement, otherT.PrimaryLanguageElement)) return false;
			if (!DeepComparable.IsExactly(MimeTypeElement, otherT.MimeTypeElement)) return false;
			if (!DeepComparable.IsExactly(FormatElement, otherT.FormatElement)) return false;
			if (!DeepComparable.IsExactly(SizeElement, otherT.SizeElement)) return false;
			if (!DeepComparable.IsExactly(HashElement, otherT.HashElement)) return false;
			if (!DeepComparable.IsExactly(LocationElement, otherT.LocationElement)) return false;
			if (!DeepComparable.IsExactly(Service, otherT.Service)) return false;
			if (!DeepComparable.IsExactly(Context, otherT.Context)) return false;

			return true;
		}

	}

}
