using Hl7.Fhir.Introspection;
using Hl7.Fhir.Support;
using Hl7.Fhir.Validation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;

/*
  Copyright (c) 2011-2013, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  

*/

//
// Generated on Thu, Oct 23, 2014 14:22+0200 for FHIR v0.0.82
//
namespace Hl7.Fhir.Model
{
	/// <summary>
	/// A reference to a document
	/// </summary>
	[FhirType("DocumentReference", IsResource = true)]
	[DataContract]
	public partial class DocumentReference : Hl7.Fhir.Model.Resource, System.ComponentModel.INotifyPropertyChanged
	{
		/// <summary>
		/// The type of relationship between documents
		/// </summary>
		[FhirEnumeration("DocumentRelationshipType")]
		public enum DocumentRelationshipType
		{
			/// <summary>
			/// This document logically replaces or supercedes the target document.
			/// </summary>
			[EnumLiteral("replaces")]
			Replaces,
			/// <summary>
			/// This document was generated by transforming the target document (e.g. format or language conversion).
			/// </summary>
			[EnumLiteral("transforms")]
			Transforms,
			/// <summary>
			/// This document is a signature of the target document.
			/// </summary>
			[EnumLiteral("signs")]
			Signs,
			/// <summary>
			/// This document adds additional information to the target document.
			/// </summary>
			[EnumLiteral("appends")]
			Appends,
		}

		/// <summary>
		/// The status of the document reference
		/// </summary>
		[FhirEnumeration("DocumentReferenceStatus")]
		public enum DocumentReferenceStatus
		{
			/// <summary>
			/// This is the current reference for this document.
			/// </summary>
			[EnumLiteral("current")]
			Current,
			/// <summary>
			/// This reference has been superseded by another reference.
			/// </summary>
			[EnumLiteral("superceded")]
			Superceded,
			/// <summary>
			/// This reference was created in error.
			/// </summary>
			[EnumLiteral("entered in error")]
			EnteredInError,
		}

		[FhirType("DocumentReferenceContextComponent")]
		[DataContract]
		public partial class DocumentReferenceContextComponent : Hl7.Fhir.Model.Element, System.ComponentModel.INotifyPropertyChanged
		{
			/// <summary>
			/// Main Clinical Acts Documented
			/// </summary>
			[FhirElement("event", InSummary = true, Order = 40)]
			[Cardinality(Min = 0, Max = -1)]
			[DataMember]
			public List<Hl7.Fhir.Model.CodeableConcept> Event
			{
				get { return _Event; }
				set { _Event = value; OnPropertyChanged("Event"); }
			}
			private List<Hl7.Fhir.Model.CodeableConcept> _Event;

			/// <summary>
			/// Time of service that is being documented
			/// </summary>
			[FhirElement("period", InSummary = true, Order = 50)]
			[DataMember]
			public Hl7.Fhir.Model.Period Period
			{
				get { return _Period; }
				set { _Period = value; OnPropertyChanged("Period"); }
			}
			private Hl7.Fhir.Model.Period _Period;

			/// <summary>
			/// Kind of facility where patient was seen
			/// </summary>
			[FhirElement("facilityType", InSummary = true, Order = 60)]
			[DataMember]
			public Hl7.Fhir.Model.CodeableConcept FacilityType
			{
				get { return _FacilityType; }
				set { _FacilityType = value; OnPropertyChanged("FacilityType"); }
			}
			private Hl7.Fhir.Model.CodeableConcept _FacilityType;

			public override IDeepCopyable CopyTo(IDeepCopyable other)
			{
				var dest = other as DocumentReferenceContextComponent;

				if (dest != null)
				{
					base.CopyTo(dest);
					if (Event != null) dest.Event = new List<Hl7.Fhir.Model.CodeableConcept>(Event.DeepCopy());
					if (Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
					if (FacilityType != null) dest.FacilityType = (Hl7.Fhir.Model.CodeableConcept)FacilityType.DeepCopy();
					return dest;
				}
				else
					throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
			}

			public override IDeepCopyable DeepCopy()
			{
				return CopyTo(new DocumentReferenceContextComponent());
			}

			public override bool Matches(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceContextComponent;
				if (otherT == null) return false;

				if (!base.Matches(otherT)) return false;
				if (!DeepComparable.Matches(Event, otherT.Event)) return false;
				if (!DeepComparable.Matches(Period, otherT.Period)) return false;
				if (!DeepComparable.Matches(FacilityType, otherT.FacilityType)) return false;

				return true;
			}

			public override bool IsExactly(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceContextComponent;
				if (otherT == null) return false;

				if (!base.IsExactly(otherT)) return false;
				if (!DeepComparable.IsExactly(Event, otherT.Event)) return false;
				if (!DeepComparable.IsExactly(Period, otherT.Period)) return false;
				if (!DeepComparable.IsExactly(FacilityType, otherT.FacilityType)) return false;

				return true;
			}

		}


		[FhirType("DocumentReferenceRelatesToComponent")]
		[DataContract]
		public partial class DocumentReferenceRelatesToComponent : Hl7.Fhir.Model.Element, System.ComponentModel.INotifyPropertyChanged
		{
			/// <summary>
			/// replaces | transforms | signs | appends
			/// </summary>
			[FhirElement("code", InSummary = true, Order = 40)]
			[Cardinality(Min = 1, Max = 1)]
			[DataMember]
			public Code<Hl7.Fhir.Model.DocumentReference.DocumentRelationshipType> CodeElement
			{
				get { return _CodeElement; }
				set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
			}
			private Code<Hl7.Fhir.Model.DocumentReference.DocumentRelationshipType> _CodeElement;

			/// <summary>
			/// replaces | transforms | signs | appends
			/// </summary>
			/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
			[NotMapped]
			[IgnoreDataMember]
			public Hl7.Fhir.Model.DocumentReference.DocumentRelationshipType? Code
			{
				get { return CodeElement != null ? CodeElement.Value : null; }
				set
				{
					if (value == null)
						CodeElement = null;
					else
						CodeElement = new Code<Hl7.Fhir.Model.DocumentReference.DocumentRelationshipType>(value);
					OnPropertyChanged("Code");
				}
			}

			/// <summary>
			/// Target of the relationship
			/// </summary>
			[FhirElement("target", InSummary = true, Order = 50)]
			[References("DocumentReference")]
			[Cardinality(Min = 1, Max = 1)]
			[DataMember]
			public Hl7.Fhir.Model.ResourceReference Target
			{
				get { return _Target; }
				set { _Target = value; OnPropertyChanged("Target"); }
			}
			private Hl7.Fhir.Model.ResourceReference _Target;

			public override IDeepCopyable CopyTo(IDeepCopyable other)
			{
				var dest = other as DocumentReferenceRelatesToComponent;

				if (dest != null)
				{
					base.CopyTo(dest);
					if (CodeElement != null) dest.CodeElement = (Code<Hl7.Fhir.Model.DocumentReference.DocumentRelationshipType>)CodeElement.DeepCopy();
					if (Target != null) dest.Target = (Hl7.Fhir.Model.ResourceReference)Target.DeepCopy();
					return dest;
				}
				else
					throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
			}

			public override IDeepCopyable DeepCopy()
			{
				return CopyTo(new DocumentReferenceRelatesToComponent());
			}

			public override bool Matches(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceRelatesToComponent;
				if (otherT == null) return false;

				if (!base.Matches(otherT)) return false;
				if (!DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
				if (!DeepComparable.Matches(Target, otherT.Target)) return false;

				return true;
			}

			public override bool IsExactly(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceRelatesToComponent;
				if (otherT == null) return false;

				if (!base.IsExactly(otherT)) return false;
				if (!DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
				if (!DeepComparable.IsExactly(Target, otherT.Target)) return false;

				return true;
			}

		}


		[FhirType("DocumentReferenceServiceParameterComponent")]
		[DataContract]
		public partial class DocumentReferenceServiceParameterComponent : Hl7.Fhir.Model.Element, System.ComponentModel.INotifyPropertyChanged
		{
			/// <summary>
			/// Parameter name in service call
			/// </summary>
			[FhirElement("name", InSummary = true, Order = 40)]
			[Cardinality(Min = 1, Max = 1)]
			[DataMember]
			public Hl7.Fhir.Model.FhirString NameElement
			{
				get { return _NameElement; }
				set { _NameElement = value; OnPropertyChanged("NameElement"); }
			}
			private Hl7.Fhir.Model.FhirString _NameElement;

			/// <summary>
			/// Parameter name in service call
			/// </summary>
			/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
			[NotMapped]
			[IgnoreDataMember]
			public string Name
			{
				get { return NameElement != null ? NameElement.Value : null; }
				set
				{
					if (value == null)
						NameElement = null;
					else
						NameElement = new Hl7.Fhir.Model.FhirString(value);
					OnPropertyChanged("Name");
				}
			}

			/// <summary>
			/// Parameter value for the name
			/// </summary>
			[FhirElement("value", InSummary = true, Order = 50)]
			[DataMember]
			public Hl7.Fhir.Model.FhirString ValueElement
			{
				get { return _ValueElement; }
				set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
			}
			private Hl7.Fhir.Model.FhirString _ValueElement;

			/// <summary>
			/// Parameter value for the name
			/// </summary>
			/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
			[NotMapped]
			[IgnoreDataMember]
			public string Value
			{
				get { return ValueElement != null ? ValueElement.Value : null; }
				set
				{
					if (value == null)
						ValueElement = null;
					else
						ValueElement = new Hl7.Fhir.Model.FhirString(value);
					OnPropertyChanged("Value");
				}
			}

			public override IDeepCopyable CopyTo(IDeepCopyable other)
			{
				var dest = other as DocumentReferenceServiceParameterComponent;

				if (dest != null)
				{
					base.CopyTo(dest);
					if (NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
					if (ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
					return dest;
				}
				else
					throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
			}

			public override IDeepCopyable DeepCopy()
			{
				return CopyTo(new DocumentReferenceServiceParameterComponent());
			}

			public override bool Matches(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceServiceParameterComponent;
				if (otherT == null) return false;

				if (!base.Matches(otherT)) return false;
				if (!DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
				if (!DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

				return true;
			}

			public override bool IsExactly(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceServiceParameterComponent;
				if (otherT == null) return false;

				if (!base.IsExactly(otherT)) return false;
				if (!DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
				if (!DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

				return true;
			}

		}


		[FhirType("DocumentReferenceServiceComponent")]
		[DataContract]
		public partial class DocumentReferenceServiceComponent : Hl7.Fhir.Model.Element, System.ComponentModel.INotifyPropertyChanged
		{
			/// <summary>
			/// Type of service (i.e. XDS.b)
			/// </summary>
			[FhirElement("type", InSummary = true, Order = 40)]
			[Cardinality(Min = 1, Max = 1)]
			[DataMember]
			public Hl7.Fhir.Model.CodeableConcept Type
			{
				get { return _Type; }
				set { _Type = value; OnPropertyChanged("Type"); }
			}
			private Hl7.Fhir.Model.CodeableConcept _Type;

			/// <summary>
			/// Where service is located (usually a URL)
			/// </summary>
			[FhirElement("address", InSummary = true, Order = 50)]
			[DataMember]
			public Hl7.Fhir.Model.FhirString AddressElement
			{
				get { return _AddressElement; }
				set { _AddressElement = value; OnPropertyChanged("AddressElement"); }
			}
			private Hl7.Fhir.Model.FhirString _AddressElement;

			/// <summary>
			/// Where service is located (usually a URL)
			/// </summary>
			/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
			[NotMapped]
			[IgnoreDataMember]
			public string Address
			{
				get { return AddressElement != null ? AddressElement.Value : null; }
				set
				{
					if (value == null)
						AddressElement = null;
					else
						AddressElement = new Hl7.Fhir.Model.FhirString(value);
					OnPropertyChanged("Address");
				}
			}

			/// <summary>
			/// Service call parameters
			/// </summary>
			[FhirElement("parameter", InSummary = true, Order = 60)]
			[Cardinality(Min = 0, Max = -1)]
			[DataMember]
			public List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceParameterComponent> Parameter
			{
				get { return _Parameter; }
				set { _Parameter = value; OnPropertyChanged("Parameter"); }
			}
			private List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceParameterComponent> _Parameter;

			public override IDeepCopyable CopyTo(IDeepCopyable other)
			{
				var dest = other as DocumentReferenceServiceComponent;

				if (dest != null)
				{
					base.CopyTo(dest);
					if (Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
					if (AddressElement != null) dest.AddressElement = (Hl7.Fhir.Model.FhirString)AddressElement.DeepCopy();
					if (Parameter != null) dest.Parameter = new List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceParameterComponent>(Parameter.DeepCopy());
					return dest;
				}
				else
					throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
			}

			public override IDeepCopyable DeepCopy()
			{
				return CopyTo(new DocumentReferenceServiceComponent());
			}

			public override bool Matches(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceServiceComponent;
				if (otherT == null) return false;

				if (!base.Matches(otherT)) return false;
				if (!DeepComparable.Matches(Type, otherT.Type)) return false;
				if (!DeepComparable.Matches(AddressElement, otherT.AddressElement)) return false;
				if (!DeepComparable.Matches(Parameter, otherT.Parameter)) return false;

				return true;
			}

			public override bool IsExactly(IDeepComparable other)
			{
				var otherT = other as DocumentReferenceServiceComponent;
				if (otherT == null) return false;

				if (!base.IsExactly(otherT)) return false;
				if (!DeepComparable.IsExactly(Type, otherT.Type)) return false;
				if (!DeepComparable.IsExactly(AddressElement, otherT.AddressElement)) return false;
				if (!DeepComparable.IsExactly(Parameter, otherT.Parameter)) return false;

				return true;
			}

		}


		/// <summary>
		/// Master Version Specific Identifier
		/// </summary>
		[FhirElement("masterIdentifier", Order = 70)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.Identifier MasterIdentifier
		{
			get { return _MasterIdentifier; }
			set { _MasterIdentifier = value; OnPropertyChanged("MasterIdentifier"); }
		}
		private Hl7.Fhir.Model.Identifier _MasterIdentifier;

		/// <summary>
		/// Other identifiers for the document
		/// </summary>
		[FhirElement("identifier", Order = 80)]
		[Cardinality(Min = 0, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.Identifier> Identifier
		{
			get { return _Identifier; }
			set { _Identifier = value; OnPropertyChanged("Identifier"); }
		}
		private List<Hl7.Fhir.Model.Identifier> _Identifier;

		/// <summary>
		/// Who|what is the subject of the document
		/// </summary>
		[FhirElement("subject", Order = 90)]
		[References("Patient", "Practitioner", "Group", "Device")]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.ResourceReference Subject
		{
			get { return _Subject; }
			set { _Subject = value; OnPropertyChanged("Subject"); }
		}
		private Hl7.Fhir.Model.ResourceReference _Subject;

		/// <summary>
		/// What kind of document this is (LOINC if possible)
		/// </summary>
		[FhirElement("type", Order = 100)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.CodeableConcept Type
		{
			get { return _Type; }
			set { _Type = value; OnPropertyChanged("Type"); }
		}
		private Hl7.Fhir.Model.CodeableConcept _Type;

		/// <summary>
		/// Categorization of Document
		/// </summary>
		[FhirElement("class", Order = 110)]
		[DataMember]
		public Hl7.Fhir.Model.CodeableConcept Class
		{
			get { return _Class; }
			set { _Class = value; OnPropertyChanged("Class"); }
		}
		private Hl7.Fhir.Model.CodeableConcept _Class;

		/// <summary>
		/// Who and/or what authored the document
		/// </summary>
		[FhirElement("author", Order = 120)]
		[References("Practitioner", "Device", "Patient", "RelatedPerson")]
		[Cardinality(Min = 1, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.ResourceReference> Author
		{
			get { return _Author; }
			set { _Author = value; OnPropertyChanged("Author"); }
		}
		private List<Hl7.Fhir.Model.ResourceReference> _Author;

		/// <summary>
		/// Org which maintains the document
		/// </summary>
		[FhirElement("custodian", Order = 130)]
		[References("Organization")]
		[DataMember]
		public Hl7.Fhir.Model.ResourceReference Custodian
		{
			get { return _Custodian; }
			set { _Custodian = value; OnPropertyChanged("Custodian"); }
		}
		private Hl7.Fhir.Model.ResourceReference _Custodian;

		/// <summary>
		/// Manages access policies for the document
		/// </summary>
		[FhirElement("policyManager", Order = 140)]
		[DataMember]
		public Hl7.Fhir.Model.FhirUri PolicyManagerElement
		{
			get { return _PolicyManagerElement; }
			set { _PolicyManagerElement = value; OnPropertyChanged("PolicyManagerElement"); }
		}
		private Hl7.Fhir.Model.FhirUri _PolicyManagerElement;

		/// <summary>
		/// Manages access policies for the document
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string PolicyManager
		{
			get { return PolicyManagerElement != null ? PolicyManagerElement.Value : null; }
			set
			{
				if (value == null)
					PolicyManagerElement = null;
				else
					PolicyManagerElement = new Hl7.Fhir.Model.FhirUri(value);
				OnPropertyChanged("PolicyManager");
			}
		}

		/// <summary>
		/// Who/What authenticated the document
		/// </summary>
		[FhirElement("authenticator", Order = 150)]
		[References("Practitioner", "Organization")]
		[DataMember]
		public Hl7.Fhir.Model.ResourceReference Authenticator
		{
			get { return _Authenticator; }
			set { _Authenticator = value; OnPropertyChanged("Authenticator"); }
		}
		private Hl7.Fhir.Model.ResourceReference _Authenticator;

		/// <summary>
		/// Document creation time
		/// </summary>
		[FhirElement("created", Order = 160)]
		[DataMember]
		public Hl7.Fhir.Model.FhirDateTime CreatedElement
		{
			get { return _CreatedElement; }
			set { _CreatedElement = value; OnPropertyChanged("CreatedElement"); }
		}
		private Hl7.Fhir.Model.FhirDateTime _CreatedElement;

		/// <summary>
		/// Document creation time
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string Created
		{
			get { return CreatedElement != null ? CreatedElement.Value : null; }
			set
			{
				if (value == null)
					CreatedElement = null;
				else
					CreatedElement = new Hl7.Fhir.Model.FhirDateTime(value);
				OnPropertyChanged("Created");
			}
		}

		/// <summary>
		/// When this document reference created
		/// </summary>
		[FhirElement("indexed", Order = 170)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.Instant IndexedElement
		{
			get { return _IndexedElement; }
			set { _IndexedElement = value; OnPropertyChanged("IndexedElement"); }
		}
		private Hl7.Fhir.Model.Instant _IndexedElement;

		/// <summary>
		/// When this document reference created
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public DateTimeOffset? Indexed
		{
			get { return IndexedElement != null ? IndexedElement.Value : null; }
			set
			{
				if (value == null)
					IndexedElement = null;
				else
					IndexedElement = new Hl7.Fhir.Model.Instant(value);
				OnPropertyChanged("Indexed");
			}
		}

		/// <summary>
		/// current | superceded | entered in error
		/// </summary>
		[FhirElement("status", Order = 180)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus> StatusElement
		{
			get { return _StatusElement; }
			set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
		}
		private Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus> _StatusElement;

		/// <summary>
		/// current | superceded | entered in error
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus? Status
		{
			get { return StatusElement != null ? StatusElement.Value : null; }
			set
			{
				if (value == null)
					StatusElement = null;
				else
					StatusElement = new Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus>(value);
				OnPropertyChanged("Status");
			}
		}

		/// <summary>
		/// preliminary | final | appended | amended | entered in error
		/// </summary>
		[FhirElement("docStatus", Order = 190)]
		[DataMember]
		public Hl7.Fhir.Model.CodeableConcept DocStatus
		{
			get { return _DocStatus; }
			set { _DocStatus = value; OnPropertyChanged("DocStatus"); }
		}
		private Hl7.Fhir.Model.CodeableConcept _DocStatus;

		/// <summary>
		/// Relationships to other documents
		/// </summary>
		[FhirElement("relatesTo", Order = 200)]
		[Cardinality(Min = 0, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceRelatesToComponent> RelatesTo
		{
			get { return _RelatesTo; }
			set { _RelatesTo = value; OnPropertyChanged("RelatesTo"); }
		}
		private List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceRelatesToComponent> _RelatesTo;

		/// <summary>
		/// Human-readable description (title)
		/// </summary>
		[FhirElement("description", Order = 210)]
		[DataMember]
		public Hl7.Fhir.Model.FhirString DescriptionElement
		{
			get { return _DescriptionElement; }
			set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
		}
		private Hl7.Fhir.Model.FhirString _DescriptionElement;

		/// <summary>
		/// Human-readable description (title)
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string Description
		{
			get { return DescriptionElement != null ? DescriptionElement.Value : null; }
			set
			{
				if (value == null)
					DescriptionElement = null;
				else
					DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
				OnPropertyChanged("Description");
			}
		}

		/// <summary>
		/// Sensitivity of source document
		/// </summary>
		[FhirElement("confidentiality", Order = 220)]
		[Cardinality(Min = 0, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.CodeableConcept> Confidentiality
		{
			get { return _Confidentiality; }
			set { _Confidentiality = value; OnPropertyChanged("Confidentiality"); }
		}
		private List<Hl7.Fhir.Model.CodeableConcept> _Confidentiality;

		/// <summary>
		/// The marked primary language for the document
		/// </summary>
		[FhirElement("primaryLanguage", Order = 230)]
		[DataMember]
		public Hl7.Fhir.Model.Code PrimaryLanguageElement
		{
			get { return _PrimaryLanguageElement; }
			set { _PrimaryLanguageElement = value; OnPropertyChanged("PrimaryLanguageElement"); }
		}
		private Hl7.Fhir.Model.Code _PrimaryLanguageElement;

		/// <summary>
		/// The marked primary language for the document
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string PrimaryLanguage
		{
			get { return PrimaryLanguageElement != null ? PrimaryLanguageElement.Value : null; }
			set
			{
				if (value == null)
					PrimaryLanguageElement = null;
				else
					PrimaryLanguageElement = new Hl7.Fhir.Model.Code(value);
				OnPropertyChanged("PrimaryLanguage");
			}
		}

		/// <summary>
		/// Mime type, + maybe character encoding
		/// </summary>
		[FhirElement("mimeType", Order = 240)]
		[Cardinality(Min = 1, Max = 1)]
		[DataMember]
		public Hl7.Fhir.Model.Code MimeTypeElement
		{
			get { return _MimeTypeElement; }
			set { _MimeTypeElement = value; OnPropertyChanged("MimeTypeElement"); }
		}
		private Hl7.Fhir.Model.Code _MimeTypeElement;

		/// <summary>
		/// Mime type, + maybe character encoding
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string MimeType
		{
			get { return MimeTypeElement != null ? MimeTypeElement.Value : null; }
			set
			{
				if (value == null)
					MimeTypeElement = null;
				else
					MimeTypeElement = new Hl7.Fhir.Model.Code(value);
				OnPropertyChanged("MimeType");
			}
		}

		/// <summary>
		/// Format/content rules for the document
		/// </summary>
		[FhirElement("format", Order = 250)]
		[Cardinality(Min = 0, Max = -1)]
		[DataMember]
		public List<Hl7.Fhir.Model.FhirUri> FormatElement
		{
			get { return _FormatElement; }
			set { _FormatElement = value; OnPropertyChanged("FormatElement"); }
		}
		private List<Hl7.Fhir.Model.FhirUri> _FormatElement;

		/// <summary>
		/// Format/content rules for the document
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public IEnumerable<string> Format
		{
			get { return FormatElement != null ? FormatElement.Select(elem => elem.Value) : null; }
			set
			{
				if (value == null)
					FormatElement = null;
				else
					FormatElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem => new Hl7.Fhir.Model.FhirUri(elem)));
				OnPropertyChanged("Format");
			}
		}

		/// <summary>
		/// Size of the document in bytes
		/// </summary>
		[FhirElement("size", Order = 260)]
		[DataMember]
		public Hl7.Fhir.Model.Integer SizeElement
		{
			get { return _SizeElement; }
			set { _SizeElement = value; OnPropertyChanged("SizeElement"); }
		}
		private Hl7.Fhir.Model.Integer _SizeElement;

		/// <summary>
		/// Size of the document in bytes
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public int? Size
		{
			get { return SizeElement != null ? SizeElement.Value : null; }
			set
			{
				if (value == null)
					SizeElement = null;
				else
					SizeElement = new Hl7.Fhir.Model.Integer(value);
				OnPropertyChanged("Size");
			}
		}

		/// <summary>
		/// HexBinary representation of SHA1
		/// </summary>
		[FhirElement("hash", Order = 270)]
		[DataMember]
		public Hl7.Fhir.Model.FhirString HashElement
		{
			get { return _HashElement; }
			set { _HashElement = value; OnPropertyChanged("HashElement"); }
		}
		private Hl7.Fhir.Model.FhirString _HashElement;

		/// <summary>
		/// HexBinary representation of SHA1
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string Hash
		{
			get { return HashElement != null ? HashElement.Value : null; }
			set
			{
				if (value == null)
					HashElement = null;
				else
					HashElement = new Hl7.Fhir.Model.FhirString(value);
				OnPropertyChanged("Hash");
			}
		}

		/// <summary>
		/// Where to access the document
		/// </summary>
		[FhirElement("location", Order = 280)]
		[DataMember]
		public Hl7.Fhir.Model.FhirUri LocationElement
		{
			get { return _LocationElement; }
			set { _LocationElement = value; OnPropertyChanged("LocationElement"); }
		}
		private Hl7.Fhir.Model.FhirUri _LocationElement;

		/// <summary>
		/// Where to access the document
		/// </summary>
		/// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
		[NotMapped]
		[IgnoreDataMember]
		public string Location
		{
			get { return LocationElement != null ? LocationElement.Value : null; }
			set
			{
				if (value == null)
					LocationElement = null;
				else
					LocationElement = new Hl7.Fhir.Model.FhirUri(value);
				OnPropertyChanged("Location");
			}
		}

		/// <summary>
		/// If access is not fully described by location
		/// </summary>
		[FhirElement("service", Order = 290)]
		[DataMember]
		public Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceComponent Service
		{
			get { return _Service; }
			set { _Service = value; OnPropertyChanged("Service"); }
		}
		private Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceComponent _Service;

		/// <summary>
		/// Clinical context of document
		/// </summary>
		[FhirElement("context", Order = 300)]
		[DataMember]
		public Hl7.Fhir.Model.DocumentReference.DocumentReferenceContextComponent Context
		{
			get { return _Context; }
			set { _Context = value; OnPropertyChanged("Context"); }
		}
		private Hl7.Fhir.Model.DocumentReference.DocumentReferenceContextComponent _Context;

		public override IDeepCopyable CopyTo(IDeepCopyable other)
		{
			var dest = other as DocumentReference;

			if (dest != null)
			{
				base.CopyTo(dest);
				if (MasterIdentifier != null) dest.MasterIdentifier = (Hl7.Fhir.Model.Identifier)MasterIdentifier.DeepCopy();
				if (Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
				if (Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
				if (Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
				if (Class != null) dest.Class = (Hl7.Fhir.Model.CodeableConcept)Class.DeepCopy();
				if (Author != null) dest.Author = new List<Hl7.Fhir.Model.ResourceReference>(Author.DeepCopy());
				if (Custodian != null) dest.Custodian = (Hl7.Fhir.Model.ResourceReference)Custodian.DeepCopy();
				if (PolicyManagerElement != null) dest.PolicyManagerElement = (Hl7.Fhir.Model.FhirUri)PolicyManagerElement.DeepCopy();
				if (Authenticator != null) dest.Authenticator = (Hl7.Fhir.Model.ResourceReference)Authenticator.DeepCopy();
				if (CreatedElement != null) dest.CreatedElement = (Hl7.Fhir.Model.FhirDateTime)CreatedElement.DeepCopy();
				if (IndexedElement != null) dest.IndexedElement = (Hl7.Fhir.Model.Instant)IndexedElement.DeepCopy();
				if (StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus>)StatusElement.DeepCopy();
				if (DocStatus != null) dest.DocStatus = (Hl7.Fhir.Model.CodeableConcept)DocStatus.DeepCopy();
				if (RelatesTo != null) dest.RelatesTo = new List<Hl7.Fhir.Model.DocumentReference.DocumentReferenceRelatesToComponent>(RelatesTo.DeepCopy());
				if (DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
				if (Confidentiality != null) dest.Confidentiality = new List<Hl7.Fhir.Model.CodeableConcept>(Confidentiality.DeepCopy());
				if (PrimaryLanguageElement != null) dest.PrimaryLanguageElement = (Hl7.Fhir.Model.Code)PrimaryLanguageElement.DeepCopy();
				if (MimeTypeElement != null) dest.MimeTypeElement = (Hl7.Fhir.Model.Code)MimeTypeElement.DeepCopy();
				if (FormatElement != null) dest.FormatElement = new List<Hl7.Fhir.Model.FhirUri>(FormatElement.DeepCopy());
				if (SizeElement != null) dest.SizeElement = (Hl7.Fhir.Model.Integer)SizeElement.DeepCopy();
				if (HashElement != null) dest.HashElement = (Hl7.Fhir.Model.FhirString)HashElement.DeepCopy();
				if (LocationElement != null) dest.LocationElement = (Hl7.Fhir.Model.FhirUri)LocationElement.DeepCopy();
				if (Service != null) dest.Service = (Hl7.Fhir.Model.DocumentReference.DocumentReferenceServiceComponent)Service.DeepCopy();
				if (Context != null) dest.Context = (Hl7.Fhir.Model.DocumentReference.DocumentReferenceContextComponent)Context.DeepCopy();
				return dest;
			}
			else
				throw Error.Argument(nameof(other), "Can only copy to an object of the same type");
		}

		public override IDeepCopyable DeepCopy()
		{
			return CopyTo(new DocumentReference());
		}

		public override bool Matches(IDeepComparable other)
		{
			var otherT = other as DocumentReference;
			if (otherT == null) return false;

			if (!base.Matches(otherT)) return false;
			if (!DeepComparable.Matches(MasterIdentifier, otherT.MasterIdentifier)) return false;
			if (!DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
			if (!DeepComparable.Matches(Subject, otherT.Subject)) return false;
			if (!DeepComparable.Matches(Type, otherT.Type)) return false;
			if (!DeepComparable.Matches(Class, otherT.Class)) return false;
			if (!DeepComparable.Matches(Author, otherT.Author)) return false;
			if (!DeepComparable.Matches(Custodian, otherT.Custodian)) return false;
			if (!DeepComparable.Matches(PolicyManagerElement, otherT.PolicyManagerElement)) return false;
			if (!DeepComparable.Matches(Authenticator, otherT.Authenticator)) return false;
			if (!DeepComparable.Matches(CreatedElement, otherT.CreatedElement)) return false;
			if (!DeepComparable.Matches(IndexedElement, otherT.IndexedElement)) return false;
			if (!DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
			if (!DeepComparable.Matches(DocStatus, otherT.DocStatus)) return false;
			if (!DeepComparable.Matches(RelatesTo, otherT.RelatesTo)) return false;
			if (!DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
			if (!DeepComparable.Matches(Confidentiality, otherT.Confidentiality)) return false;
			if (!DeepComparable.Matches(PrimaryLanguageElement, otherT.PrimaryLanguageElement)) return false;
			if (!DeepComparable.Matches(MimeTypeElement, otherT.MimeTypeElement)) return false;
			if (!DeepComparable.Matches(FormatElement, otherT.FormatElement)) return false;
			if (!DeepComparable.Matches(SizeElement, otherT.SizeElement)) return false;
			if (!DeepComparable.Matches(HashElement, otherT.HashElement)) return false;
			if (!DeepComparable.Matches(LocationElement, otherT.LocationElement)) return false;
			if (!DeepComparable.Matches(Service, otherT.Service)) return false;
			if (!DeepComparable.Matches(Context, otherT.Context)) return false;

			return true;
		}

		public override bool IsExactly(IDeepComparable other)
		{
			var otherT = other as DocumentReference;
			if (otherT == null) return false;

			if (!base.IsExactly(otherT)) return false;
			if (!DeepComparable.IsExactly(MasterIdentifier, otherT.MasterIdentifier)) return false;
			if (!DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
			if (!DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
			if (!DeepComparable.IsExactly(Type, otherT.Type)) return false;
			if (!DeepComparable.IsExactly(Class, otherT.Class)) return false;
			if (!DeepComparable.IsExactly(Author, otherT.Author)) return false;
			if (!DeepComparable.IsExactly(Custodian, otherT.Custodian)) return false;
			if (!DeepComparable.IsExactly(PolicyManagerElement, otherT.PolicyManagerElement)) return false;
			if (!DeepComparable.IsExactly(Authenticator, otherT.Authenticator)) return false;
			if (!DeepComparable.IsExactly(CreatedElement, otherT.CreatedElement)) return false;
			if (!DeepComparable.IsExactly(IndexedElement, otherT.IndexedElement)) return false;
			if (!DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
			if (!DeepComparable.IsExactly(DocStatus, otherT.DocStatus)) return false;
			if (!DeepComparable.IsExactly(RelatesTo, otherT.RelatesTo)) return false;
			if (!DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
			if (!DeepComparable.IsExactly(Confidentiality, otherT.Confidentiality)) return false;
			if (!DeepComparable.IsExactly(PrimaryLanguageElement, otherT.PrimaryLanguageElement)) return false;
			if (!DeepComparable.IsExactly(MimeTypeElement, otherT.MimeTypeElement)) return false;
			if (!DeepComparable.IsExactly(FormatElement, otherT.FormatElement)) return false;
			if (!DeepComparable.IsExactly(SizeElement, otherT.SizeElement)) return false;
			if (!DeepComparable.IsExactly(HashElement, otherT.HashElement)) return false;
			if (!DeepComparable.IsExactly(LocationElement, otherT.LocationElement)) return false;
			if (!DeepComparable.IsExactly(Service, otherT.Service)) return false;
			if (!DeepComparable.IsExactly(Context, otherT.Context)) return false;

			return true;
		}

	}

}
